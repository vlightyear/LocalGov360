@page "/documenttemplates"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@attribute [Authorize(Roles = "developer,CouncilAdmin")]
@rendermode InteractiveServer

<style>
    .action-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .header-buttons {
        display: flex;
        gap: 1rem;
    }

    .blazor-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .blazor-modal-content {
        background: white;
        border-radius: 0.5rem;
        width: 90%;
        max-width: 800px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    }

    .modal-header {
        padding: 1.5rem;
        border-bottom: 1px solid #dee2e6;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .modal-footer {
        padding: 1rem 1.5rem;
        border-top: 1px solid #dee2e6;
        display: flex;
        justify-content: flex-end;
        gap: 0.5rem;
    }

    .btn-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        font-weight: bold;
        color: #000;
        opacity: 0.5;
        cursor: pointer;
        line-height: 1;
    }

        .btn-close:hover {
            opacity: 0.75;
        }

    .btn-dark {
        background-color: #343a40;
        border-color: #343a40;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 0.25rem;
    }

        .btn-dark:hover {
            background-color: #23272b;
            border-color: #1d2124;
            color: white;
        }

    .btn-secondary {
        background-color: #6c757d;
        border-color: #6c757d;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 0.25rem;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
            border-color: #545b62;
            color: white;
        }

    .form-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
    }

    .form-full-width {
        grid-column: 1 / -1;
    }

    .alert {
        margin-bottom: 1rem;
    }

    .template-content {
        height: 300px;
        resize: vertical;
    }

    .template-preview {
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        padding: 1rem;
        background-color: #f8f9fa;
        max-height: 200px;
        overflow-y: auto;
    }

    .status-badge {
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .status-active {
        background-color: #d1edff;
        color: #0c63e4;
    }

    .status-inactive {
        background-color: #fecaca;
        color: #dc2626;
    }
</style>

<div class="container-fluid py-2">
    <div class="row">
        <div class="col-12">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }
            <div class="card my-4">
                <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                    <div class="bg-gradient-dark shadow-dark border-radius-lg pt-4 pb-3">
                        <h6 class="text-white text-capitalize ps-3">Document Templates</h6>
                        <div class="ps-3 pb-2 d-flex align-items-center header-buttons">
                            <button class="btn btn-sm btn-outline-light" @onclick="RefreshTemplates">
                                <i class="fas fa-sync-alt me-1"></i> Refresh
                            </button>
                            <button class="btn btn-sm btn-outline-light" @onclick="ShowCreateTemplateModal">
                                <i class="fas fa-plus-circle me-1"></i> Add Template
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body px-0 pb-2">
                    @if (isLoading)
                    {
                        <div class="text-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (templates.Any())
                    {
                        <div class="table-responsive p-0">
                            <table class="table align-items-center mb-0">
                                <thead>
                                    <tr>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Template Name</th>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Service</th>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Document Type</th>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Status</th>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Created</th>
                                        <th class="text-secondary opacity-7">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var template in templates)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex px-2 py-1">
                                                    <div class="d-flex flex-column justify-content-center">
                                                        <h6 class="mb-0 text-sm">@template.Name</h6>
                                                        <p class="text-xs text-secondary mb-0">@template.Description</p>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <p class="text-xs text-secondary mb-0">@template.ServiceName</p>
                                            </td>
                                            <td>
                                                <p class="text-xs text-secondary mb-0">@template.DocumentType</p>
                                            </td>
                                            <td>
                                                <span class="status-badge @(template.IsActive ? "status-active" : "status-inactive")">
                                                    @(template.IsActive ? "Active" : "Inactive")
                                                </span>
                                            </td>
                                            <td>
                                                <p class="text-xs text-secondary mb-0">@template.CreatedDate.ToString("dd/MM/yyyy")</p>
                                            </td>
                                            <td class="align-middle">
                                                <div class="btn-group action-buttons">
                                                    <button class="btn btn-sm btn-outline-info" @onclick="() => PreviewTemplate(template.Id)">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => EditTemplate(template.Id)">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteTemplate(template.Id)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center p-4">
                            <p class="text-muted">No document templates found.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Template Modal -->
@if (showTemplateModal)
{
    <div class="blazor-modal" @onclick="CloseTemplateModal">
        <div class="blazor-modal-content" @onclick:stopPropagation>
            <div class="modal-header">
                <h5 class="modal-title">@(isEditing ? "Edit" : "Create") Document Template</h5>
                <button type="button" class="btn-close" @onclick="CloseTemplateModal">×</button>
            </div>
            <div class="modal-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }
                <EditForm Model="@templateModel" OnValidSubmit="SaveTemplate">
                    <DataAnnotationsValidator />
                    <div class="form-grid">
                        <div class="mb-3">
                            <label for="templateName" class="form-label">Template Name</label>
                            <InputText id="templateName" @bind-Value="templateModel.Name" class="form-control" />
                            <ValidationMessage For="@(() => templateModel.Name)" />
                        </div>
                        <div class="mb-3">
                            <label for="serviceName" class="form-label">Service</label>
                            <InputSelect id="serviceName" @bind-Value="templateModel.ServiceName" class="form-control">
                                <option value="">Select a service</option>
                                @foreach (var service in availableServices)
                                {
                                    <option value="@service">@service</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => templateModel.ServiceName)" />
                        </div>
                        <div class="mb-3">
                            <label for="documentType" class="form-label">Document Type</label>
                            <InputSelect id="documentType" @bind-Value="templateModel.DocumentType" class="form-control">
                                <option value="">Select document type</option>
                                @foreach (var docType in documentTypes)
                                {
                                    <option value="@docType">@docType</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => templateModel.DocumentType)" />
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <InputCheckbox id="isActive" @bind-Value="templateModel.IsActive" class="form-check-input" />
                                <label for="isActive" class="form-check-label">Active</label>
                            </div>
                        </div>
                        <div class="mb-3 form-full-width">
                            <label for="description" class="form-label">Description</label>
                            <InputTextArea id="description" @bind-Value="templateModel.Description" class="form-control" rows="2" />
                            <ValidationMessage For="@(() => templateModel.Description)" />
                        </div>
                        <div class="mb-3 form-full-width">
                            <label for="templateContent" class="form-label">Template Content (HTML)</label>
                            <InputTextArea id="templateContent" @bind-Value="templateModel.Content" class="form-control template-content" />
                            <ValidationMessage For="@(() => templateModel.Content)" />
                            <small class="form-text text-muted">
                                Use placeholders like {{CustomerName}}, {{Amount}}, {{Date}} for dynamic content.
                            </small>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseTemplateModal">Cancel</button>
                        <button type="submit" class="btn btn-dark">Save Template</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<!-- Preview Modal -->
@if (showPreviewModal)
{
    <div class="blazor-modal" @onclick="ClosePreviewModal">
        <div class="blazor-modal-content" @onclick:stopPropagation>
            <div class="modal-header">
                <h5 class="modal-title">Template Preview: @previewTemplate?.Name</h5>
                <button type="button" class="btn-close" @onclick="ClosePreviewModal">×</button>
            </div>
            <div class="modal-body">
                @if (previewTemplate != null)
                {
                    <div class="mb-3">
                        <strong>Service:</strong> @previewTemplate.ServiceName<br />
                        <strong>Document Type:</strong> @previewTemplate.DocumentType<br />
                        <strong>Status:</strong> <span class="status-badge @(previewTemplate.IsActive ? "status-active" : "status-inactive")">@(previewTemplate.IsActive ? "Active" : "Inactive")</span>
                    </div>
                    <div class="mb-3">
                        <strong>Description:</strong><br />
                        @previewTemplate.Description
                    </div>
                    <div class="mb-3">
                        <strong>Template Content:</strong>
                        <div class="template-preview">
                            @((MarkupString)previewTemplate.Content)
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="ClosePreviewModal">Close</button>
            </div>
        </div>
    </div>
}

@code {
    private List<DocumentTemplate> templates = new();
    private bool isLoading = true;
    private bool showTemplateModal = false;
    private bool showPreviewModal = false;
    private bool isEditing = false;
    private string errorMessage = string.Empty;
    private DocumentTemplateModel templateModel = new();
    private DocumentTemplate? previewTemplate;

    // Sample data for dropdowns
    private List<string> availableServices = new()
    {
        "Payment Service",
        "License Service",
        "Permit Service",
        "Tax Service",
        "Water Service",
        "Waste Management",
        "Building Permits"
    };

    private List<string> documentTypes = new()
    {
        "Receipt",
        "Invoice",
        "Certificate",
        "License",
        "Permit",
        "Notice",
        "Report",
        "Statement"
    };

    public class DocumentTemplate
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string ServiceName { get; set; } = string.Empty;
        public string DocumentType { get; set; } = string.Empty;
        public string Content { get; set; } = string.Empty;
        public bool IsActive { get; set; }
        public DateTime CreatedDate { get; set; }
    }

    public class DocumentTemplateModel
    {
        public Guid Id { get; set; }
        [Required(ErrorMessage = "Template name is required")]
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        [Required(ErrorMessage = "Service selection is required")]
        public string ServiceName { get; set; } = string.Empty;
        [Required(ErrorMessage = "Document type is required")]
        public string DocumentType { get; set; } = string.Empty;
        [Required(ErrorMessage = "Template content is required")]
        public string Content { get; set; } = string.Empty;
        public bool IsActive { get; set; } = true;
    }

    protected override async Task OnInitializedAsync()
    {
        LoadSampleData();
        isLoading = false;
    }

    private void LoadSampleData()
    {
        templates = new List<DocumentTemplate>
        {
            new DocumentTemplate
            {
                Id = Guid.NewGuid(),
                Name = "Payment Receipt",
                Description = "Standard payment receipt template",
                ServiceName = "Payment Service",
                DocumentType = "Receipt",
                Content = "<h2>Payment Receipt</h2><p>Dear {{CustomerName}},</p><p>We have received your payment of {{Amount}} {{Currency}} for {{ServiceDescription}}.</p><p>Date: {{Date}}</p><p>Reference: {{Reference}}</p><p>Thank you for your payment.</p>",
                IsActive = true,
                CreatedDate = DateTime.Now.AddDays(-10)
            },
            new DocumentTemplate
            {
                Id = Guid.NewGuid(),
                Name = "License Certificate",
                Description = "Business license certificate template",
                ServiceName = "License Service",
                DocumentType = "Certificate",
                Content = "<div style='text-align: center;'><h1>BUSINESS LICENSE CERTIFICATE</h1><p>This certifies that</p><h3>{{BusinessName}}</h3><p>is hereby licensed to operate as {{BusinessType}}</p><p>Valid from: {{StartDate}} to {{EndDate}}</p><p>License Number: {{LicenseNumber}}</p></div>",
                IsActive = true,
                CreatedDate = DateTime.Now.AddDays(-5)
            },
            new DocumentTemplate
            {
                Id = Guid.NewGuid(),
                Name = "Tax Invoice",
                Description = "Municipal tax invoice template",
                ServiceName = "Tax Service",
                DocumentType = "Invoice",
                Content = "<h2>TAX INVOICE</h2><p>Invoice No: {{InvoiceNumber}}</p><p>Date: {{Date}}</p><hr><p>{{CustomerName}}<br>{{CustomerAddress}}</p><hr><table><tr><th>Description</th><th>Amount</th></tr><tr><td>{{TaxDescription}}</td><td>{{Amount}}</td></tr></table><hr><p><strong>Total Due: {{TotalAmount}}</strong></p><p>Due Date: {{DueDate}}</p>",
                IsActive = false,
                CreatedDate = DateTime.Now.AddDays(-15)
            }
        };
    }

    private void RefreshTemplates()
    {
        LoadSampleData();
        StateHasChanged();
    }

    private void ShowCreateTemplateModal()
    {
        templateModel = new DocumentTemplateModel();
        isEditing = false;
        showTemplateModal = true;
        errorMessage = string.Empty;
    }

    private void CloseTemplateModal()
    {
        showTemplateModal = false;
        templateModel = new DocumentTemplateModel();
        isEditing = false;
        errorMessage = string.Empty;
    }

    private void EditTemplate(Guid templateId)
    {
        var template = templates.FirstOrDefault(t => t.Id == templateId);
        if (template != null)
        {
            templateModel = new DocumentTemplateModel
            {
                Id = template.Id,
                Name = template.Name,
                Description = template.Description,
                ServiceName = template.ServiceName,
                DocumentType = template.DocumentType,
                Content = template.Content,
                IsActive = template.IsActive
            };
            isEditing = true;
            showTemplateModal = true;
            errorMessage = string.Empty;
        }
    }

    private void SaveTemplate()
    {
        errorMessage = string.Empty;
        try
        {
            if (isEditing)
            {
                var template = templates.FirstOrDefault(t => t.Id == templateModel.Id);
                if (template != null)
                {
                    template.Name = templateModel.Name;
                    template.Description = templateModel.Description;
                    template.ServiceName = templateModel.ServiceName;
                    template.DocumentType = templateModel.DocumentType;
                    template.Content = templateModel.Content;
                    template.IsActive = templateModel.IsActive;
                }
            }
            else
            {
                var newTemplate = new DocumentTemplate
                {
                    Id = Guid.NewGuid(),
                    Name = templateModel.Name,
                    Description = templateModel.Description,
                    ServiceName = templateModel.ServiceName,
                    DocumentType = templateModel.DocumentType,
                    Content = templateModel.Content,
                    IsActive = templateModel.IsActive,
                    CreatedDate = DateTime.Now
                };
                templates.Add(newTemplate);
            }

            showTemplateModal = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving template: {ex.Message}";
        }
    }

    private void DeleteTemplate(Guid templateId)
    {
        templates.RemoveAll(t => t.Id == templateId);
        StateHasChanged();
    }

    private void PreviewTemplate(Guid templateId)
    {
        previewTemplate = templates.FirstOrDefault(t => t.Id == templateId);
        showPreviewModal = true;
    }

    private void ClosePreviewModal()
    {
        showPreviewModal = false;
        previewTemplate = null;
    }
}