@page "/service-payments"
@rendermode InteractiveServer
@using LocalGov360.Data
@using LocalGov360.Data.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .container-fluid {
        padding-right: 15px;
        padding-left: 15px;
        margin-right: auto;
        margin-left: auto;
    }

    .card {
        position: relative;
        display: flex;
        flex-direction: column;
        min-width: 0;
        word-wrap: break-word;
        background-color: #fff;
        background-clip: border-box;
        border: 0 solid rgba(0, 0, 0, 0.125);
        border-radius: 0.25rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }

    .card-header {
        padding: 1.5rem;
        margin-bottom: 0;
        background-color: rgba(0, 0, 0, 0.03);
        border-bottom: 0 solid rgba(0, 0, 0, 0.125);
    }

    .card-body {
        flex: 1 1 auto;
        padding: 1.5rem;
    }

    .table-responsive {
        display: block;
        width: 100%;
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
    }

    .table {
        width: 100%;
        margin-bottom: 1rem;
        color: #212529;
        border-collapse: collapse;
    }

        .table th,
        .table td {
            padding: 0.75rem;
            vertical-align: top;
            border-top: 1px solid #dee2e6;
        }

        .table thead th {
            vertical-align: bottom;
            border-bottom: 2px solid #dee2e6;
        }

    .badge {
        display: inline-block;
        padding: 0.25em 0.4em;
        font-size: 75%;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 0.25rem;
    }

    .bg-gradient-success {
        background-image: linear-gradient(310deg, #2dce89 0%, #2dcecc 100%);
    }

    .bg-gradient-warning {
        background-image: linear-gradient(310deg, #fb6340 0%, #fbb140 100%);
    }

    .bg-gradient-secondary {
        background-image: linear-gradient(310deg, #627594 0%, #a8b8d8 100%);
    }

    /* Filter Section Styles */
    .filter-section {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .filter-row {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .filter-group {
        flex: 1;
        min-width: 200px;
    }

    .form-control {
        display: block;
        width: 100%;
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .form-control:focus {
            border-color: #80bdff;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

    .btn-filter {
        color: #fff;
        background-color: #000;
        border-color: #000;
        padding: 0.375rem 0.75rem;
        border-radius: 0.25rem;
        cursor: pointer;
    }

        .btn-filter:hover {
            background-color: #333;
            border-color: #333;
        }

    .btn-reset {
        color: #000;
        background-color: transparent;
        border: 1px solid #000;
        padding: 0.375rem 0.75rem;
        border-radius: 0.25rem;
        cursor: pointer;
    }

        .btn-reset:hover {
            color: #fff;
            background-color: #000;
        }

    /* Pagination Styles */
    .pagination-container {
        display: flex;
        justify-content: center;
        margin-top: 1.5rem;
        width: 100%;
        overflow-x: auto;
    }

    /* Updated Pagination Styles */
    .pagination-container {
        display: flex;
        justify-content: center;
        margin-top: 1.5rem;
        width: 100%;
    }

    .pagination {
        display: flex;
        flex-wrap: nowrap;
        padding: 0;
        margin: 0;
        list-style: none;
        gap: 4px;
        overflow-x: auto;
        max-width: 100%;
    }

    .page-item {
        flex-shrink: 0;
    }

    .page-link {
        display: block;
        padding: 0.5rem 0.75rem;
        color: #000;
        background-color: #fff;
        border: 1px solid #dee2e6;
        text-decoration: none;
        min-width: 40px;
        text-align: center;
    }

        .page-link:hover {
            background-color: #f8f9fa;
        }

    .page-item.active .page-link {
        color: #fff;
        background-color: #000;
        border-color: #000;
    }

    .page-item.disabled .page-link {
        color: #6c757d;
        background-color: #fff;
        border-color: #dee2e6;
    }


    .text-center {
        text-align: center;
    }

    .text-muted {
        color: #6c757d !important;
    }

    .spinner-border {
        display: inline-block;
        width: 2rem;
        height: 2rem;
        vertical-align: text-bottom;
        border: 0.25em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
    }

    @@keyframes spinner-border {
        to {
            transform: rotate(360deg);
        }
    }

    .visually-hidden {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
    }

    .alert {
        position: relative;
        padding: 0.75rem 1.25rem;
        margin-bottom: 1rem;
        border: 1px solid transparent;
        border-radius: 0.25rem;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .alert-dismissible {
        padding-right: 4rem;
    }

    .btn-close {
        position: absolute;
        top: 0;
        right: 0;
        padding: 0.75rem 1.25rem;
        color: inherit;
    }
</style>

<div class="container-fluid py-2">
    <div class="row">
        <div class="col-12">
            <div class="card my-4">
                <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                    <div class="bg-gradient-dark shadow-dark border-radius-lg pt-4 pb-3">
                        <h6 class="text-white text-capitalize ps-3">Service Payments</h6>
                    </div>
                </div>
                <div class="card-body px-0 pb-2">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            @errorMessage
                            <button type="button" class="btn-close" @onclick="() => errorMessage = null" aria-label="Close"></button>
                        </div>
                    }

                    <!-- Filter Section -->
                    <div class="filter-section">
                        <div class="filter-row">
                            <div class="filter-group">
                                <label for="startDate">From Date</label>
                                <input type="date" id="startDate" class="form-control" @bind="filterStartDate" />
                            </div>
                            <div class="filter-group">
                                <label for="endDate">To Date</label>
                                <input type="date" id="endDate" class="form-control" @bind="filterEndDate" />
                            </div>
                            <div class="filter-group">
                                <label for="status">Status</label>
                                <select id="status" class="form-control" @bind="filterStatus">
                                    <option value="">All Statuses</option>
                                    <option value="Pending">Pending</option>
                                    <option value="Completed">Completed</option>
                                    <option value="Failed">Failed</option>
                                </select>
                            </div>
                        </div>
                        <div class="filter-row">
                            <button class="btn-filter" @onclick="ApplyFilters">Apply Filters</button>
                            <button class="btn-reset" @onclick="ResetFilters">Reset Filters</button>
                        </div>
                    </div>

                    @if (isLoading)
                    {
                        <div class="text-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (payments == null || !payments.Any())
                    {
                        <div class="text-center p-4">
                            <p class="text-muted">No payments found.</p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive p-0">
                            <table class="table align-items-center mb-0">
                                <thead>
                                    <tr>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Service</th>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Amount</th>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Currency</th>
                                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Status</th>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Transaction Ref</th>
                                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Date</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var payment in currentPagePayments)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex px-2 py-1">
                                                    <div>
                                                     
                                                    </div>
                                                   
                                                </div>
                                            </td>
                                            <td>
                                                <div class="d-flex flex-column justify-content-center">
                                                    <h6 class="mb-0 text-sm">@payment.Amount.ToString("N2")</h6>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="d-flex flex-column justify-content-center">
                                                    <h6 class="mb-0 text-sm">@payment.Currency</h6>
                                                </div>
                                            </td>
                                            <td class="align-middle text-center">
                                                @if (payment.Status == "Completed")
                                                {
                                                    <span class="badge badge-sm bg-gradient-success">@payment.Status</span>
                                                }
                                                else if (payment.Status == "Pending")
                                                {
                                                    <span class="badge badge-sm bg-gradient-warning">@payment.Status</span>
                                                }
                                                else
                                                {
                                                    <span class="badge badge-sm bg-gradient-secondary">@payment.Status</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="d-flex flex-column justify-content-center">
                                                    <h6 class="mb-0 text-sm">@payment.TransactionReference</h6>
                                                </div>
                                            </td>
                                            <td class="align-middle text-center">
                                                <span class="text-secondary text-xs font-weight-bold">
                                                    @payment.CreatedDate.ToString("dd/MM/yy")
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        <div class="pagination-container">
                            <ul class="pagination">
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <a class="page-link" href="#" @onclick="() => ChangePage(1)">First</a>
                                </li>
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <a class="page-link" href="#" @onclick="() => ChangePage(currentPage - 1)">Previous</a>
                                </li>

                                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                {
                                    <li class="page-item @(i == currentPage ? "active" : "")">
                                        <a class="page-link" href="#" @onclick="() => ChangePage(i)">@i</a>
                                    </li>
                                }

                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <a class="page-link" href="#" @onclick="() => ChangePage(currentPage + 1)">Next</a>
                                </li>
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <a class="page-link" href="#" @onclick="() => ChangePage(totalPages)">Last</a>
                                </li>
                            </ul>
                        </div>

                        <div class="text-center text-muted">
                            Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalItems) of @totalItems entries
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ServicePayment> payments = new();
    private List<ServicePayment> filteredPayments = new();
    private List<ServicePayment> currentPagePayments = new();
    private bool isLoading = true;
    private string errorMessage;

    // Filter parameters
    private DateTime? filterStartDate;
    private DateTime? filterEndDate;
    private string filterStatus = "";

    // Pagination parameters
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems = 0;
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                var dbContext = await DbContextFactory.CreateDbContextAsync();
                var currentUser = await UserManager.GetUserAsync(user);

                payments = await dbContext.ServicePayments
                    .Where(p => p.CreatedBy == currentUser.Email)
                    .OrderByDescending(p => p.CreatedDate)
                    .ToListAsync();

                ApplyFilters();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading payments: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        filteredPayments = payments;

        // Apply date filter
        if (filterStartDate.HasValue)
        {
            filteredPayments = filteredPayments.Where(p => p.CreatedDate.Date >= filterStartDate.Value.Date).ToList();
        }

        if (filterEndDate.HasValue)
        {
            filteredPayments = filteredPayments.Where(p => p.CreatedDate.Date <= filterEndDate.Value.Date).ToList();
        }

        // Apply status filter
        if (!string.IsNullOrEmpty(filterStatus))
        {
            filteredPayments = filteredPayments.Where(p => p.Status == filterStatus).ToList();
        }

        totalItems = filteredPayments.Count;
        totalPages = (int)Math.Ceiling((double)totalItems / pageSize);

        // Ensure current page is valid
        currentPage = Math.Max(1, Math.Min(currentPage, totalPages));

        UpdateCurrentPageItems();
    }

    private void ResetFilters()
    {
        filterStartDate = null;
        filterEndDate = null;
        filterStatus = "";
        currentPage = 1;
        ApplyFilters();
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        UpdateCurrentPageItems();
    }

    private void UpdateCurrentPageItems()
    {
        currentPagePayments = filteredPayments
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
        StateHasChanged();
    }

    private string GetAvatarColor(string input)
    {
        if (string.IsNullOrEmpty(input)) return "primary";

        var hash = input.GetHashCode();
        var colors = new[] { "primary", "success", "warning", "danger", "dark" };
        return colors[Math.Abs(hash) % colors.Length];
    }

    private string GetUserInitials(string email, string userName)
    {
        if (!string.IsNullOrEmpty(email))
        {
            return email[0].ToString().ToUpper();
        }

        if (!string.IsNullOrEmpty(userName))
        {
            return userName[0].ToString().ToUpper();
        }

        return "?";
    }
}