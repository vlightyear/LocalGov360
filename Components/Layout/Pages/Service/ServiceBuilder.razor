@page "/service"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using LocalGov360.Data
@using LocalGov360.Services
@using LocalGov360.Data.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject IServiceService ServiceService
@inject IWorkflowFactory WorkflowFactory
@inject IJSRuntime JS
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext _db
@attribute [Authorize]


 <div class="container-fluid py-3">
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light mb-3 rounded shadow-sm">
        <div class="container-fluid">
            <span class="navbar-brand fw-bold fs-5">Service Builder</span>
            <div>
                <button class="btn btn-sm btn-outline-dark me-2" @onclick='() => ShowView("builder")'>
                    <i class="fas fa-plus-circle"></i> Create Service
                </button>
                <button class="btn btn-sm btn-outline-dark" @onclick='() => ShowView("list")'>
                    <i class="fas fa-list"></i> Browse Services
                </button>
            </div>
        </div>
    </nav>

    @if (!string.IsNullOrWhiteSpace(Feedback))
    {
        <div class="alert @(Feedback.Contains("Error") ? "alert-danger" : "alert-success") alert-dismissible fade show" role="alert">
            @Feedback
            <button type="button" class="btn-close" @onclick="() => Feedback = null"></button>
        </div>
    }

    @if (CurrentView == "builder")
    {
        <div class="row" style="height: calc(100vh - 180px);">
            <div class="col-lg-6 d-flex flex-column">
                <div class="card h-100 d-flex flex-column shadow-sm">
                    <div class="card-header bg-white d-flex justify-content-between align-items-center flex-shrink-0 py-2">
                        <h6 class="mb-0 text-dark"><i class="fas fa-tools me-2"></i> Builder</h6>
                        @if (EditServiceId != null)
                        {
                            <button class="btn btn-sm btn-outline-danger py-1 px-2" @onclick="DeleteServiceAsync">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        }
                    </div>
                    
                    <EditForm Model="BuilderModel" OnValidSubmit="SaveServiceAsync" class="h-100 d-flex flex-column">
                        <DataAnnotationsValidator />
                        
                        <div class="card-body flex-grow-1 overflow-auto p-3" style="max-height: calc(100vh - 280px);">
                            <div class="mb-3">
                                <label class="form-label fw-semibold small">Service Name *</label>
                                <InputText class="form-control form-control-sm" @bind-Value="BuilderModel.Name" />
                                <ValidationMessage For="() => BuilderModel.Name" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label fw-semibold small">Description</label>
                                <InputTextArea class="form-control form-control-sm" rows="2" @bind-Value="BuilderModel.Description" />
                                <ValidationMessage For="() => BuilderModel.Description" />
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label fw-semibold small">Service Fee</label>
                                    <InputNumber class="form-control form-control-sm" @bind-Value="BuilderModel.ServiceFee" />
                                    <small class="text-muted">Leave empty if no fee</small>
                                    <ValidationMessage For="() => BuilderModel.ServiceFee" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label fw-semibold small">Fee Type</label>
                                    <InputSelect class="form-select form-select-sm" @bind-Value="BuilderModel.FeeType">
                                        @foreach (var feeType in Enum.GetValues<ServiceModels.FeeType>())
                                        {
                                            <option value="@feeType">@feeType</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label fw-semibold small">Workflow Template</label>
                                    <InputSelect class="form-select form-select-sm" @bind-Value="BuilderModel.WorkflowTemplateId">
                                        <option value="">-- Select Template --</option>
                                        @foreach (var template in WorkflowTemplates)
                                        {
                                            <option value="@template.Id">@template.Name</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label fw-semibold small">Document Template</label>
                                    <InputSelect class="form-select form-select-sm" @bind-Value="BuilderModel.DocumentTemplateId">
                                        <option value="">-- Select Template --</option>
                                        @foreach (var template in DocumentTemplates)
                                        {
                                            <option value="@template.Id">@template.Name</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>

                            <h6 class="mb-2 text-dark">Fields</h6>
                            
                            @if (!BuilderModel.Fields.Any())
                            {
                                <div class="alert alert-info py-2">
                                    <small>No fields added yet. Click "Add Field" to get started.</small>
                                </div>
                            }
                            else
                            {
                                @for (int i = 0; i < BuilderModel.Fields.Count; i++)
                                {
                                    var idx = i;
                                    <div class="card mb-2 border">
                                        <div class="card-header bg-light d-flex justify-content-between align-items-center py-2">
                                            <small class="fw-semibold">Field @(idx + 1): @BuilderModel.Fields[idx].Label</small>
                                            <button type="button" class="btn btn-sm btn-outline-danger py-0 px-1"
                                                    @onclick="() => RemoveFieldFromBuilder(idx)">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                        <div class="card-body p-2">
                                            <div class="row g-2">
                                                <div class="col-md-6">
                                                    <label class="form-label small fw-semibold">Name *</label>
                                                    <InputText class="form-control form-control-sm"
                                                               @bind-Value="BuilderModel.Fields[idx].Name" />
                                                    <ValidationMessage For="() => BuilderModel.Fields[idx].Name" />
                                                </div>
                                                <div class="col-md-6">
                                                    <label class="form-label small fw-semibold">Label *</label>
                                                    <InputText class="form-control form-control-sm"
                                                               @bind-Value="BuilderModel.Fields[idx].Label" />
                                                    <ValidationMessage For="() => BuilderModel.Fields[idx].Label" />
                                                </div>
                                                <div class="col-12">
                                                    <label class="form-label small fw-semibold">Description</label>
                                                    <InputTextArea class="form-control form-control-sm" rows="1"
                                                                   @bind-Value="BuilderModel.Fields[idx].Description" />
                                                </div>
                                                <div class="col-md-4">
                                                    <label class="form-label small fw-semibold">Type</label>
                                                    <InputSelect class="form-select form-select-sm"
                                                                 @bind-Value="BuilderModel.Fields[idx].Type"
                                                                 @onchange="() => OnFieldTypeChanged(idx)">
                                                        @foreach (var ft in Enum.GetValues<ServiceModels.FieldType>())
                                                        {
                                                            <option value="@ft">@ft</option>
                                                        }
                                                    </InputSelect>
                                                </div>
                                                <div class="col-md-4">
                                                    <label class="form-label small fw-semibold">Placeholder</label>
                                                    <InputText class="form-control form-control-sm"
                                                               @bind-Value="BuilderModel.Fields[idx].Placeholder" />
                                                </div>
                                                <div class="col-md-4">
                                                    <label class="form-label small fw-semibold">Default Value</label>
                                                    <InputText class="form-control form-control-sm"
                                                               @bind-Value="BuilderModel.Fields[idx].DefaultValue" />
                                                </div>
                                                <div class="col-12 d-flex align-items-center">
                                                    <div class="form-check">
                                                        <InputCheckbox class="form-check-input form-check-input-sm"
                                                                       @bind-Value="BuilderModel.Fields[idx].IsRequired" />
                                                        <label class="form-check-label small">Required field</label>
                                                    </div>
                                                </div>
                                                @if (BuilderModel.Fields[idx].Type is ServiceModels.FieldType.Select or
                                                                                    ServiceModels.FieldType.Radio or
                                                                                    ServiceModels.FieldType.Checkbox or
                                                                                    ServiceModels.FieldType.MultiSelect)
                                                {
                                                    <div class="col-12">
                                                        <label class="form-label small fw-semibold">Options (one per line) *</label>
                                                        <InputTextArea class="form-control form-control-sm" rows="2"
                                                                       @bind-Value="BuilderModel.Fields[idx].OptionsRaw" 
                                                                       @onchange="() => OnFieldOptionsChanged(idx)" />
                                                        <small class="text-muted">Enter one option per line</small>
                                                        <ValidationMessage For="() => BuilderModel.Fields[idx].OptionsRaw" />
                                                        @if (!string.IsNullOrWhiteSpace(BuilderModel.Fields[idx].OptionsRaw))
                                                        {
                                                            <div class="mt-1">
                                                                <small class="text-info">Preview: @BuilderModel.Fields[idx].ParsedOptions.Count option(s)</small>
                                                                <div class="small text-muted">
                                                                    @foreach (var opt in BuilderModel.Fields[idx].ParsedOptions.Take(3))
                                                                    {
                                                                        <span class="badge bg-light text-dark me-1 small">@opt</span>
                                                                    }
                                                                    @if (BuilderModel.Fields[idx].ParsedOptions.Count > 3)
                                                                    {
                                                                        <span class="text-muted small">... and @(BuilderModel.Fields[idx].ParsedOptions.Count - 3) more</span>
                                                                    }
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                        
                        <div class="card-footer bg-white border-top py-2">
                            <div class="d-flex gap-2">
                                <button type="button" class="btn btn-outline-dark btn-sm me-2" @onclick="AddFieldToBuilder">
                                    <i class="fas fa-plus"></i> Add Field
                                </button>
                                <button type="submit" class="btn btn-success btn-sm">
                                    <i class="fas fa-save"></i> @(EditServiceId == null ? "Create Service" : "Update Service")
                                </button>
                                <button type="button" class="btn btn-outline-secondary btn-sm" @onclick='() => ShowView("list")'>
                                    <i class="fas fa-times"></i> Cancel
                                </button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>

            <!-- Preview Section -->
            <div class="col-lg-6 d-flex flex-column">
                <div class="card h-100 d-flex flex-column shadow-sm">
                    <div class="card-header bg-white d-flex justify-content-between align-items-center flex-shrink-0 py-2">
                        <h6 class="mb-0 text-dark"><i class="fas fa-eye me-2"></i> Live Preview</h6>
                        @if (BuilderModel.Fields.Any())
                        {
                            <div class="d-flex gap-1">
                                <button type="button" class="btn btn-sm btn-outline-secondary py-1 px-2" 
                                        @onclick="PreviousPreviewPageAsync" disabled="@(PreviewPage == 0)">
                                    <i class="fas fa-chevron-left"></i>
                                </button>
                                <span class="small align-self-center text-muted px-2">
                                    @(PreviewPage + 1) / @PreviewTotalPages
                                </span>
                                <button type="button" class="btn btn-sm btn-outline-secondary py-1 px-2" 
                                        @onclick="NextPreviewPageAsync" disabled="@(PreviewPage >= PreviewTotalPages - 1)">
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                            </div>
                        }
                    </div>
                    <div class="card-body flex-grow-1 overflow-auto p-3" style="max-height: calc(100vh - 220px);">
                        @if (BuilderModel.Fields.Any())
                        {
                            <h5 class="mb-2">@BuilderModel.Name</h5>
                            <p class="text-muted mb-2 small">@(string.IsNullOrEmpty(BuilderModel.Description) ? "No description provided" : BuilderModel.Description)</p>
                            @if (BuilderModel.ServiceFee.HasValue)
                            {
                                <p class="mb-2 small"><strong>Fee:</strong> K @BuilderModel.ServiceFee.Value.ToString("N2") (@BuilderModel.FeeType)</p>
                            }

                            <!-- Progress indicator for preview -->
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <div class="progress flex-grow-1 me-2" style="height: 6px;">
                                    <div class="progress-bar bg-secondary" role="progressbar" 
                                         style="width: @(PreviewTotalPages > 0 ? ((double)(PreviewPage + 1) / PreviewTotalPages) * 100 : 0)%"
                                         aria-valuenow="@(PreviewPage + 1)" 
                                         aria-valuemin="0" 
                                         aria-valuemax="@PreviewTotalPages"></div>
                                </div>
                                <span class="text-muted small">Page @(PreviewPage + 1) of @PreviewTotalPages</span>
                            </div>

                            <div class="border rounded p-2">
                                @{
                                    var previewPageFields = BuilderModel.Fields.Skip(PreviewPage * FieldsPerPage).Take(FieldsPerPage).ToList();
                                }

                                <!-- Fields in 2x2 grid layout for preview -->
                                <div class="row g-3">
                                    @for (int i = 0; i < previewPageFields.Count; i++)
                                    {
                                        var f = previewPageFields[i];
                                        <div class="col-md-6">
                                            <div class="card h-100 border-light">
                                                <div class="card-body p-2">
                                                    <label class="form-label fw-semibold small">
                                                        @f.Label
                                                        @if (f.IsRequired)
                                                        {
                                                            <span class="text-danger">*</span>
                                                        }
                                                    </label>

                                                    @if (!string.IsNullOrEmpty(f.Description))
                                                    {
                                                        <p class="text-muted small mb-2">@f.Description</p>
                                                    }

                                                    @switch (f.Type)
                                                    {
                                                        case ServiceModels.FieldType.TextArea:
                                                            <textarea class="form-control form-control-sm" placeholder="@f.Placeholder" rows="3">@f.DefaultValue</textarea>
                                                            break;
                                                        case ServiceModels.FieldType.Select:
                                                            <select class="form-select form-select-sm">
                                                                <option value="">-- choose --</option>
                                                                @foreach (var o in f.ParsedOptions)
                                                                {
                                                                    <option value="@o" selected="@(o == f.DefaultValue)">@o</option>
                                                                }
                                                            </select>
                                                            break;
                                                        case ServiceModels.FieldType.MultiSelect:
                                                            <div class="border rounded p-2" style="max-height: 100px; overflow-y: auto;">
                                                                @foreach (var o in f.ParsedOptions)
                                                                {
                                                                    <div class="form-check form-check-sm mb-1">
                                                                        <input class="form-check-input form-check-input-sm" type="checkbox" />
                                                                        <label class="form-check-label small">@o</label>
                                                                    </div>
                                                                }
                                                            </div>
                                                            <small class="text-muted">Select multiple</small>
                                                            break;
                                                        case ServiceModels.FieldType.Radio:
                                                            @foreach (var o in f.ParsedOptions)
                                                            {
                                                                <div class="form-check form-check-sm mb-1">
                                                                    <input class="form-check-input form-check-input-sm" type="radio"
                                                                           name="@($"preview-radio-{f.Name}")"
                                                                           value="@o"
                                                                           checked="@(o == f.DefaultValue)" />
                                                                    <label class="form-check-label small">@o</label>
                                                                </div>
                                                            }
                                                            break;
                                                        case ServiceModels.FieldType.Checkbox:
                                                            @foreach (var o in f.ParsedOptions)
                                                            {
                                                                <div class="form-check form-check-sm mb-1">
                                                                    <input class="form-check-input form-check-input-sm" type="checkbox"
                                                                           name="@($"preview-checkbox-{f.Name}")"
                                                                           value="@o"
                                                                           checked="@(o == f.DefaultValue)" />
                                                                    <label class="form-check-label small">@o</label>
                                                                </div>
                                                            }
                                                            break;
                                                        case ServiceModels.FieldType.File:
                                                            <input type="file" class="form-control form-control-sm" multiple />
                                                            <small class="text-muted">Multiple files allowed</small>
                                                            break;
                                                        default:
                                                            <input type="@f.Type.ToString().ToLower()"
                                                                   class="form-control form-control-sm"
                                                                   placeholder="@f.Placeholder"
                                                                   value="@f.DefaultValue" />
                                                            break;
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>

                                <!-- Navigation buttons for preview -->
                                <div class="d-flex justify-content-between align-items-center mt-3 pt-2 border-top">
                                    <div>
                                        @if (PreviewPage > 0)
                                        {
                                            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="PreviousPreviewPageAsync">
                                                <i class="fas fa-chevron-left"></i> Previous
                                            </button>
                                        }
                                    </div>
                                    
                                    <div class="d-flex gap-2">
                                        @if (PreviewPage < PreviewTotalPages - 1)
                                        {
                                            <button type="button" class="btn btn-secondary btn-sm" @onclick="NextPreviewPageAsync">
                                                Next <i class="fas fa-chevron-right"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            <button type="button" class="btn btn-success btn-sm" disabled>
                                                <i class="fas fa-paper-plane"></i> Submit Form
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="text-center text-muted py-4">
                                <i class="fas fa-plus-circle fa-2x mb-2"></i>
                                <p class="small">Add fields to see the preview</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    @if (CurrentView == "list")
    {
        <div class="card shadow-sm">
            <div class="card-header bg-white d-flex justify-content-between align-items-center py-2">
                <h6 class="mb-0 text-dark"><i class="fas fa-list me-2"></i> Available Services</h6>
                <div>
                    <button class="btn btn-sm btn-outline-dark py-1 px-2" @onclick='() => ShowView("builder")'>
                        <i class="fas fa-plus"></i> New Service
                    </button>
                </div>
            </div>
            <div class="card-body p-3">
                @if (Services == null)
                {
                    <div class="text-center py-4">
                        <div class="spinner-border text-dark" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (!Services.Any())
                {
                    <div class="text-center py-4 text-muted">
                        <i class="fas fa-inbox fa-2x mb-2"></i>
                        <h6>No services yet</h6>
                        <button class="btn btn-dark btn-sm" @onclick='() => ShowView("builder")'>
                            <i class="fas fa-plus"></i> Create the first one
                        </button>
                    </div>
                }
                else
                {
                    <!-- Search and Info Bar -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="input-group input-group-sm">
                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                                <input type="text" class="form-control" placeholder="Search services..." 
                                       value="@SearchTerm" @onchange="OnSearchChanged" />
                                @if (!string.IsNullOrWhiteSpace(SearchTerm))
                                {
                                    <button class="btn btn-outline-secondary" type="button" @onclick="ClearSearch">
                                        <i class="fas fa-times"></i>
                                    </button>
                                }
                            </div>
                        </div>
                        <div class="col-md-6 text-end">
                            <small class="text-muted">
                                @if (!string.IsNullOrWhiteSpace(SearchTerm))
                                {
                                    <span>Showing @FilteredServices.Count of @Services.Count services</span>
                                }
                                else
                                {
                                    <span>@Services.Count total services</span>
                                }
                            </small>
                        </div>
                    </div>

                    @if (!FilteredServices.Any())
                    {
                        <div class="text-center py-3 text-muted">
                            <i class="fas fa-search fa-2x mb-2"></i>
                            <h6>No services found</h6>
                            <p class="small">Try adjusting your search terms</p>
                            <button class="btn btn-sm btn-outline-dark" @onclick="ClearSearch">
                                <i class="fas fa-times"></i> Clear search
                            </button>
                        </div>
                    }
                    else
                    {
                        <style>
                            td.description-cell {
                                max-width: 200px;
                                white-space: nowrap;
                                overflow: hidden;
                                text-overflow: ellipsis;
                            }

                            td.date-cell {
                                white-space: nowrap;
                            }
                            
                            .table-sm th, .table-sm td {
                                padding: 0.5rem;
                                font-size: 0.875rem;
                            }
                        </style>

                        <div class="table-responsive">
                            <table class="table table-hover table-sm">
                                <thead class="table-light">
                                    <tr>
                                        <th>Name</th>
                                        <th>Description</th>
                                        <th>Fee</th>
                                        <th>Fields</th>
                                        <th>Created</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        var pagedServices = FilteredServices
                                            .OrderBy(s => s.Name)
                                            .Skip(ServicesCurrentPage * ServicesPerPage)
                                            .Take(ServicesPerPage);
                                    }
                                    @foreach (var svc in pagedServices)
                                    {
                                        <tr>
                                            <td>
                                                @if (!string.IsNullOrWhiteSpace(SearchTerm))
                                                {
                                                    @((MarkupString)HighlightSearchTerm(svc.Name, SearchTerm))
                                                }
                                                else
                                                {
                                                    @svc.Name
                                                }
                                            </td>
                                            <td class="description-cell">
                                                @if (string.IsNullOrEmpty(svc.Description))
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                                else
                                                {
                                                    var summary = svc.Description.Length > 50 ? svc.Description.Substring(0, 50) + "..." : svc.Description;
                                                    if (!string.IsNullOrWhiteSpace(SearchTerm))
                                                    {
                                                        @((MarkupString)HighlightSearchTerm(summary, SearchTerm))
                                                    }
                                                    else
                                                    {
                                                        <span title="@svc.Description">@summary</span>
                                                    }
                                                }
                                            </td>
                                            <td>@(svc.ServiceFee.HasValue ? $"K {svc.ServiceFee.Value.ToString("N2")} ({svc.FeeType})" : "-")</td>
                                            <td>
                                                <span class="badge bg-secondary">@svc.Fields.Count</span>
                                            </td>
                                            <td class="date-cell">@svc.CreatedDate.ToLocalTime().ToString("g")</td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                                                    <button class="btn btn-dark btn-sm py-1 px-2" @onclick="() => FillServiceAsync(svc.Id)">
                                                        <i class="fas fa-edit"></i> View
                                                    </button>
                                                    <button class="btn btn-secondary btn-sm py-1 px-2" @onclick="() => EditServiceAsync(svc.Id)">
                                                        <i class="fas fa-cog"></i> Edit
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        @if (ServicesTotalPages > 1)
                        {
                            <nav aria-label="Services pagination" class="mt-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <small class="text-muted">
                                        Showing @(ServicesCurrentPage * ServicesPerPage + 1) to 
                                        @(Math.Min((ServicesCurrentPage + 1) * ServicesPerPage, FilteredServices.Count)) 
                                        of @FilteredServices.Count services
                                    </small>
                                    
                                    <ul class="pagination pagination-sm mb-0">
                                        <li class="page-item @(ServicesCurrentPage == 0 ? "disabled" : "")">
                                            <button class="page-link" @onclick="PreviousServicesPage" disabled="@(ServicesCurrentPage == 0)">
                                                <i class="fas fa-chevron-left"></i>
                                            </button>
                                        </li>
                                        
                                        @for (int i = Math.Max(0, ServicesCurrentPage - 2); i <= Math.Min(ServicesTotalPages - 1, ServicesCurrentPage + 2); i++)
                                        {
                                            var pageNum = i;
                                            <li class="page-item @(ServicesCurrentPage == pageNum ? "active" : "")">
                                                <button class="page-link" @onclick="() => { ServicesCurrentPage = pageNum; StateHasChanged(); }">
                                                    @(pageNum + 1)
                                                </button>
                                            </li>
                                        }
                                        
                                        <li class="page-item @(ServicesCurrentPage >= ServicesTotalPages - 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="NextServicesPage" disabled="@(ServicesCurrentPage >= ServicesTotalPages - 1)">
                                                <i class="fas fa-chevron-right"></i>
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            </nav>
                        }
                    }
                }
            </div>
        </div>
    }

    @if (CurrentView == "fill" && FillModel != null)
    {
        <div class="card shadow-sm">
            <div class="card-header bg-white d-flex justify-content-between align-items-center py-2">
                <div>
                    <h6 class="mb-0">@FillModel.ServiceName</h6>
                    <p class="mb-0 text-muted small">@FillModel.ServiceDescription</p>
                    @if (FillModel.ServiceFee.HasValue)
                    {
                        <p class="mb-0 text-muted small"><strong>Fee:</strong> K @FillModel.ServiceFee.Value.ToString("N2") (@FillModel.FeeType)</p>
                    }
                </div>
                <button class="btn btn-sm btn-outline-secondary py-1 px-2" @onclick='() => ShowView("list")'>
                    <i class="fas fa-arrow-left"></i> Back to List
                </button>
            </div>
            <div class="card-body p-3">
                <EditForm Model="FillModel" OnValidSubmit="SubmitFormAsync">
                    <DataAnnotationsValidator />

                    <!-- Progress indicator -->
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div class="progress flex-grow-1 me-2" style="height: 6px;">
                            <div class="progress-bar bg-dark" role="progressbar" 
                                 style="width: @(FillModel.Fields.Count > 0 ? ((double)(CurrentPage + 1) / TotalPages) * 100 : 0)%"
                                 aria-valuenow="@(CurrentPage + 1)" 
                                 aria-valuemin="0" 
                                 aria-valuemax="@TotalPages"></div>
                        </div>
                        <span class="text-muted small">Page @(CurrentPage + 1) of @TotalPages</span>
                    </div>

                    <!-- Fields in 2x2 grid layout for current page -->
                    @{
                        var currentPageFields = FillModel.Fields.Skip(CurrentPage * FieldsPerPage).Take(FieldsPerPage).ToList();
                    }

                    <div class="row g-3">
                        @for (int i = 0; i < currentPageFields.Count; i++)
                        {
                            var field = currentPageFields[i];
                            <div class="col-md-6">
                                <div class="card h-100 border-light">
                                    <div class="card-body p-3">
                                        <label class="form-label fw-semibold small">
                                            @field.Label
                                            @if (field.IsRequired)
                                            {
                                                <span class="text-danger">*</span>
                                            }
                                        </label>

                                        @if (!string.IsNullOrEmpty(field.Description))
                                        {
                                            <p class="text-muted small mb-2">@field.Description</p>
                                        }

                                        @switch (field.Type)
                                        {
                                            case ServiceModels.FieldType.TextArea:
                                                <InputTextArea class="form-control form-control-sm" @bind-Value="field.Value"
                                                               placeholder="@field.Placeholder" rows="3" />
                                                break;
                                            case ServiceModels.FieldType.Select:
                                                <InputSelect class="form-select form-select-sm" @bind-Value="field.Value">
                                                    <option value="">-- choose --</option>
                                                    @foreach (var o in field.ParsedOptions)
                                                    {
                                                        <option value="@o">@o</option>
                                                    }
                                                </InputSelect>
                                                break;
                                            case ServiceModels.FieldType.MultiSelect:
                                                <div class="border rounded p-2" style="max-height: 150px; overflow-y: auto;">
                                                    @foreach (var o in field.ParsedOptions)
                                                    {
                                                        <div class="form-check form-check-sm mb-1">
                                                            <input class="form-check-input form-check-input-sm" type="checkbox"
                                                                   @bind="field.MultiSelectValues[o]" />
                                                            <label class="form-check-label small">@o</label>
                                                        </div>
                                                    }
                                                </div>
                                                <small class="text-muted">Select multiple options</small>
                                                break;
                                            case ServiceModels.FieldType.Radio:
                                                <InputRadioGroup @bind-Value="field.Value">
                                                    @foreach (var o in field.ParsedOptions)
                                                    {
                                                        <div class="form-check form-check-sm mb-1">
                                                            <InputRadio class="form-check-input form-check-input-sm" Value="@o" />
                                                            <label class="form-check-label small">@o</label>
                                                        </div>
                                                    }
                                                </InputRadioGroup>
                                                break;
                                            case ServiceModels.FieldType.Checkbox:
                                                @foreach (var o in field.ParsedOptions)
                                                {
                                                    <div class="form-check form-check-sm mb-1">
                                                        <input class="form-check-input form-check-input-sm" type="checkbox"
                                                               @bind="field.CheckboxValues[o]" />
                                                        <label class="form-check-label small">@o</label>
                                                    </div>
                                                }
                                                break;
                                            case ServiceModels.FieldType.File:
                                                <InputFile class="form-control form-control-sm" OnChange="e => field.Files = e.GetMultipleFiles()" multiple />
                                                <small class="text-muted">You can select multiple files</small>
                                                break;
                                            default:
                                                <InputText type="@field.Type.ToString().ToLower()"
                                                           class="form-control form-control-sm"
                                                           @bind-Value="field.Value"
                                                           placeholder="@field.Placeholder" />
                                                break;
                                        }
                                        <ValidationMessage For="@(() => field.Value)" class="text-danger small mt-1" />
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Navigation buttons -->
                    <div class="d-flex justify-content-between align-items-center mt-3 pt-2 border-top">
                        <div>
                            @if (CurrentPage > 0)
                            {
                                <button type="button" class="btn btn-outline-dark btn-sm" @onclick="PreviousPageAsync">
                                    <i class="fas fa-chevron-left"></i> Previous
                                </button>
                            }
                        </div>
                        
                        <div class="d-flex gap-2">
                            @if (CurrentPage < TotalPages - 1)
                            {
                                <button type="button" class="btn btn-dark btn-sm" @onclick="NextPageAsync">
                                    Next <i class="fas fa-chevron-right"></i>
                                </button>
                            }
                            else
                            {
                                <button type="submit" class="btn btn-success btn-sm">
                                    <i class="fas fa-paper-plane"></i> Submit Form
                                </button>
                            }
                            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick='() => ShowView("list")'>
                                <i class="fas fa-times"></i> Cancel
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>
            

@code
{
    private string CurrentView = "list";
    private string? Feedback;
    private List<ServiceModels.Service>? Services;
    private List<WorkflowTemplate> WorkflowTemplates = new();
    private List<DocumentTemplate> DocumentTemplates = new();
    private int? EditServiceId;
    private ServiceBuilderModel BuilderModel = new();
    private FillServiceModel? FillModel;
    private ClaimsPrincipal user = default!;
    private ApplicationUser appUser = default!;
    private Guid? currentUserOrgId;

    // Pagination properties
    private int CurrentPage = 0;
    private const int FieldsPerPage = 8;
    private int TotalPages => FillModel?.Fields.Count > 0 ? (int)Math.Ceiling((double)FillModel.Fields.Count / FieldsPerPage) : 1;

    // Preview pagination properties
    private int PreviewPage = 0;
    private int PreviewTotalPages => BuilderModel.Fields.Count > 0 ? (int)Math.Ceiling((double)BuilderModel.Fields.Count / FieldsPerPage) : 1;

    // Services list pagination and search properties
    private string SearchTerm = string.Empty;
    private int ServicesCurrentPage = 0;
    private const int ServicesPerPage = 10;
    private List<ServiceModels.Service> FilteredServices => Services?.Where(s => 
        string.IsNullOrWhiteSpace(SearchTerm) || 
        s.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
        (!string.IsNullOrEmpty(s.Description) && s.Description.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
    ).ToList() ?? new List<ServiceModels.Service>();
    private int ServicesTotalPages => FilteredServices.Count > 0 ? (int)Math.Ceiling((double)FilteredServices.Count / ServicesPerPage) : 1;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            appUser = await UserManager.GetUserAsync(user);
            currentUserOrgId = appUser.OrganisationId;
        }
        await LoadServicesAsync();
        await LoadWorkflowTemplatesAsync();
        await LoadDocumentTemplatesAsync();
    }

    private async Task LoadServicesAsync()
    {
        try
        {
            Services = await ServiceService.GetActiveServicesAsync();
        }
        catch (Exception ex)
        {
            Feedback = $"Error loading services: {ex.Message}";
        }
    }

    private async Task LoadWorkflowTemplatesAsync()
    {
        try
        {
            WorkflowTemplates = await _db.WorkflowTemplates
                .Where(t => t.OrganisationId == currentUserOrgId)
                .Select(t => new WorkflowTemplate { Id = t.Id, Name = t.Name })
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Feedback = $"Error loading workflow templates: {ex.Message}";
        }
    }

    private async Task LoadDocumentTemplatesAsync()
    {
        try
        {
            DocumentTemplates = await _db.DocumentTemplates
                .Where(t => t.OrganisationId == currentUserOrgId && t.IsActive)
                .Select(t => new DocumentTemplate { Id = t.Id, Name = t.Name })
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Feedback = $"Error loading document templates: {ex.Message}";
        }
    }

    private void ShowView(string view)
    {
        CurrentView = view;
        if (view == "builder")
        {
            if (EditServiceId == null)
            {
                BuilderModel = new ServiceBuilderModel();
            }
        }
        else
        {
            BuilderModel = new ServiceBuilderModel();
            EditServiceId = null;
        }
        
        if (view == "fill")
        {
            CurrentPage = 0;
        }

        if (view == "builder")
        {
            PreviewPage = 0;
        }

        if (view == "list")
        {
            ServicesCurrentPage = 0;
            SearchTerm = string.Empty;
        }
        
        StateHasChanged();
    }

    // Fixed pagination methods
    private async Task NextPageAsync()
    {
        if (CurrentPage < TotalPages - 1)
        {
            CurrentPage++;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task PreviousPageAsync()
    {
        if (CurrentPage > 0)
        {
            CurrentPage--;
            await InvokeAsync(StateHasChanged);
        }
    }

    // Fixed preview pagination methods
    private async Task NextPreviewPageAsync()
    {
        if (PreviewPage < PreviewTotalPages - 1)
        {
            PreviewPage++;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task PreviousPreviewPageAsync()
    {
        if (PreviewPage > 0)
        {
            PreviewPage--;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void NextServicesPage()
    {
        if (ServicesCurrentPage < ServicesTotalPages - 1)
        {
            ServicesCurrentPage++;
            StateHasChanged();
        }
    }

    private void PreviousServicesPage()
    {
        if (ServicesCurrentPage > 0)
        {
            ServicesCurrentPage--;
            StateHasChanged();
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? string.Empty;
        ServicesCurrentPage = 0;
        StateHasChanged();
    }

    private void ClearSearch()
    {
        SearchTerm = string.Empty;
        ServicesCurrentPage = 0;
        StateHasChanged();
    }

    private async Task AddFieldToBuilder()
    {
        BuilderModel.Fields.Add(new FieldBuilderModel
        {
            Type = ServiceModels.FieldType.Text,
            Name = $"field_{BuilderModel.Fields.Count + 1}",
            Label = $"Field {BuilderModel.Fields.Count + 1}",
            Description = "",
            Placeholder = "",
            DefaultValue = "",
            IsRequired = false
        });
        
        // Reset preview page if we're on the last page and it would be empty
        if (PreviewPage >= PreviewTotalPages - 1)
        {
            PreviewPage = Math.Max(0, PreviewTotalPages - 1);
        }
        
        await InvokeAsync(StateHasChanged);
    }

    private async Task RemoveFieldFromBuilder(int index)
    {
        if (index >= 0 && index < BuilderModel.Fields.Count)
        {
            BuilderModel.Fields.RemoveAt(index);
            
            // Adjust preview page if necessary
            if (PreviewPage >= PreviewTotalPages && PreviewPage > 0)
            {
                PreviewPage = Math.Max(0, PreviewTotalPages - 1);
            }
            
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnFieldTypeChanged(int index)
    {
        if (index >= 0 && index < BuilderModel.Fields.Count)
        {
            var field = BuilderModel.Fields[index];
            
            // Clear options if field type doesn't support them
            if (field.Type != ServiceModels.FieldType.Select &&
                field.Type != ServiceModels.FieldType.Radio &&
                field.Type != ServiceModels.FieldType.Checkbox &&
                field.Type != ServiceModels.FieldType.MultiSelect)
            {
                field.OptionsRaw = null;
            }
            
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnFieldOptionsChanged(int index)
    {
        // This method can be used for additional validation or processing when options change
        await InvokeAsync(StateHasChanged);
    }

    private async Task SaveServiceAsync()
    {
        try
        {
            foreach (var field in BuilderModel.Fields)
            {
                if ((field.Type == ServiceModels.FieldType.Select ||
                     field.Type == ServiceModels.FieldType.Radio ||
                     field.Type == ServiceModels.FieldType.Checkbox ||
                     field.Type == ServiceModels.FieldType.MultiSelect))
                {
                    if (string.IsNullOrWhiteSpace(field.OptionsRaw))
                    {
                        Feedback = $"Error: Field '{field.Label}' requires at least one option";
                        return;
                    }
                    
                    if (field.ParsedOptions.Count == 0)
                    {
                        Feedback = $"Error: Field '{field.Label}' has no valid options";
                        return;
                    }
                }
            }

            var payloadFields = BuilderModel.Fields.Select(f => new CreateServiceFieldRequest
            {
                Name = f.Name?.Trim() ?? "",
                Label = f.Label?.Trim() ?? "",
                Description = f.Description?.Trim() ?? "",
                FieldType = f.Type,
                IsRequired = f.IsRequired,
                Placeholder = f.Placeholder?.Trim() ?? "",
                DefaultValue = f.DefaultValue?.Trim() ?? "",
                Options = f.ParsedOptions.Select(o => new ServiceModels.FieldOption
                {
                    Value = o.Trim(),
                    Label = o.Trim()
                }).ToList(),
                ValidationRules = new List<ServiceModels.ValidationRule>(),
                Properties = new Dictionary<string, object>()
            }).ToList();

            if (EditServiceId is null)
            {
                var service = await ServiceService.CreateServiceAsync(new CreateServiceRequest
                {
                    Name = BuilderModel.Name?.Trim() ?? "",
                    Description = BuilderModel.Description?.Trim() ?? "",
                    CreatedBy = user.Identity?.Name ?? "Anonymous",
                    OrganisationId = currentUserOrgId,
                    WorkflowTemplateId = BuilderModel.WorkflowTemplateId,
                    DocumentTemplateId = BuilderModel.DocumentTemplateId,
                    ServiceFee = BuilderModel.ServiceFee,
                    FeeType = BuilderModel.FeeType,
                    StartDate = BuilderModel.StartDate,
                    EndDate = BuilderModel.EndDate,
                    Fields = payloadFields
                });

                await JS.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Success!",
                    text = "Service created successfully!",
                    icon = "success",
                    timer = 2000,
                    showConfirmButton = false,
                    customClass = new { popup = "swal2-popup" }
                });
                
                Feedback = "Service created successfully!";
            }
            else
            {
                var service = await ServiceService.UpdateServiceAsync(EditServiceId.Value, new UpdateServiceRequest
                {
                    Name = BuilderModel.Name?.Trim() ?? "",
                    Description = BuilderModel.Description?.Trim() ?? "",
                    ModifiedBy = user.Identity?.Name ?? "Anonymous",
                    WorkflowTemplateId = BuilderModel.WorkflowTemplateId,
                    DocumentTemplateId = BuilderModel.DocumentTemplateId,
                    ServiceFee = BuilderModel.ServiceFee,
                    FeeType = BuilderModel.FeeType,
                    StartDate = BuilderModel.StartDate,
                    EndDate = BuilderModel.EndDate,
                    Fields = payloadFields
                });
                if (service == null)
                {
                    Feedback = "Error: Service not found";
                    return;
                }

                await JS.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Success!",
                    text = "Service updated successfully!",
                    icon = "success",
                    timer = 2000,
                    showConfirmButton = false,
                    customClass = new { popup = "swal2-popup" }
                });
                
                Feedback = "Service updated successfully!";
            }

            await LoadServicesAsync();
            EditServiceId = null;
            BuilderModel = new ServiceBuilderModel();
            ShowView("list");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Error!",
                text = ex.Message,
                icon = "error",
                timer = 4000,
                showConfirmButton = false,
                customClass = new { popup = "swal2-popup" }
            });
            Feedback = $"Error: {ex.Message}";
        }
    }

    private async Task DeleteServiceAsync()
    {
        if (EditServiceId is null) return;

        try
        {
            var result = await JS.InvokeAsync<object>("Swal.fire", new
            {
                title = "Are you sure?",
                text = "This will permanently delete the service and all its data.",
                icon = "warning",
                showCancelButton = true,
                confirmButtonColor = "#dc3545",
                cancelButtonColor = "#6c757d",
                confirmButtonText = "Yes, delete it!",
                cancelButtonText = "Cancel",
                customClass = new { popup = "swal2-popup" }
            });

            var resultDict = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(result.ToString());
            if (resultDict != null && resultDict.ContainsKey("isConfirmed") && 
                resultDict["isConfirmed"].ToString().ToLower() == "true")
            {
                var deleteResult = await ServiceService.DeleteServiceAsync(EditServiceId.Value);
                if (deleteResult)
                {
                    await JS.InvokeVoidAsync("Swal.fire", new
                    {
                        title = "Deleted!",
                        text = "Service deleted successfully.",
                        icon = "success",
                        timer = 2000,
                        showConfirmButton = false,
                        customClass = new { popup = "swal2-popup" }
                    });
                    
                    Feedback = "Service deleted successfully!";
                    await LoadServicesAsync();
                    EditServiceId = null;
                    BuilderModel = new ServiceBuilderModel();
                    ShowView("list");
                }
                else
                {
                    await JS.InvokeVoidAsync("Swal.fire", new
                    {
                        title = "Error!",
                        text = "Failed to delete service.",
                        icon = "error",
                        timer = 3000,
                        showConfirmButton = false,
                        customClass = new { popup = "swal2-popup" }
                    });
                    Feedback = "Failed to delete service.";
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Error!",
                text = ex.Message,
                icon = "error",
                timer = 3000,
                showConfirmButton = false,
                customClass = new { popup = "swal2-popup" }
            });
            Feedback = $"Error deleting service: {ex.Message}";
        }
    }

    private async Task EditServiceAsync(int id)
    {
        try
        {
            var svc = await ServiceService.GetServiceAsync(id);
            if (svc is null)
            {
                Feedback = "Service not found";
                return;
            }

            EditServiceId = id;
            BuilderModel = new ServiceBuilderModel
            {
                Name = svc.Name,
                Description = svc.Description,
                ServiceFee = svc.ServiceFee,
                FeeType = svc.FeeType,
                StartDate = svc.StartDate,
                EndDate = svc.EndDate,
                WorkflowTemplateId = svc.WorkflowTemplateId,
                DocumentTemplateId = svc.DocumentTemplateId,
                Fields = svc.Fields.Select(f => new FieldBuilderModel
                {
                    Name = f.Name,
                    Label = f.Label,
                    Description = f.Description,
                    Type = f.FieldType,
                    IsRequired = f.IsRequired,
                    Placeholder = f.Placeholder,
                    DefaultValue = f.DefaultValue,
                    OptionsRaw = string.Join(Environment.NewLine, f.Options.Select(o => o.Value))
                }).ToList()
            };

            CurrentView = "builder";
            PreviewPage = 0;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Feedback = $"Error loading service: {ex.Message}";
        }
    }

    private async Task FillServiceAsync(int id)
    {
        try
        {
            var svc = await ServiceService.GetServiceAsync(id);
            if (svc is null)
            {
                Feedback = "Service not found";
                return;
            }

            FillModel = new FillServiceModel
            {
                ServiceId = svc.Id,
                ServiceName = svc.Name,
                ServiceDescription = svc.Description,
                ServiceFee = svc.ServiceFee,
                FeeType = svc.FeeType,
                StartDate = svc.StartDate,
                EndDate = svc.EndDate,
                WorkflowTemplateId = svc.WorkflowTemplateId,
                DocumentTemplateId = svc.DocumentTemplateId,
                Fields = svc.Fields.Select(f => new FieldFillModel
                {
                    Id = f.Id,
                    Name = f.Name,
                    Label = f.Label,
                    Description = f.Description,
                    Type = f.FieldType,
                    IsRequired = f.IsRequired,
                    Placeholder = f.Placeholder,
                    DefaultValue = f.DefaultValue,
                    OptionsRaw = string.Join(Environment.NewLine, f.Options.Select(o => o.Value)),
                    Value = f.DefaultValue ?? "",
                    CheckboxValues = f.Options.ToDictionary(o => o.Value, o => false),
                    MultiSelectValues = f.Options.ToDictionary(o => o.Value, o => false)
                }).ToList()
            };
            
            CurrentPage = 0;
            ShowView("fill");
        }
        catch (Exception ex)
        {
            Feedback = $"Error loading service: {ex.Message}";
        }
    }

    private async Task SubmitFormAsync()
    {
        if (FillModel is null) return;

        try
        {
            var values = new List<SubmissionValue>();

            foreach (var f in FillModel.Fields)
            {
                if (f.Type == ServiceModels.FieldType.Checkbox)
                {
                    foreach (var kv in f.CheckboxValues.Where(kv => kv.Value))
                    {
                        values.Add(new SubmissionValue
                        {
                            FieldId = f.Id,
                            Value = kv.Key
                        });
                    }
                }
                else if (f.Type == ServiceModels.FieldType.MultiSelect)
                {
                    foreach (var kv in f.MultiSelectValues.Where(kv => kv.Value))
                    {
                        values.Add(new SubmissionValue
                        {
                            FieldId = f.Id,
                            Value = kv.Key
                        });
                    }
                }
                else if (!string.IsNullOrEmpty(f.Value))
                {
                    values.Add(new SubmissionValue
                    {
                        FieldId = f.Id,
                        Value = f.Value
                    });
                }
                else if (f.IsRequired)
                {
                    Feedback = $"Field '{f.Label}' is required";
                    return;
                }
            }

            var submission = await ServiceService.SubmitServiceAsync(FillModel.ServiceId, new SubmitServiceRequest
            {
                SubmittedBy = user.Identity?.Name ?? "Anonymous",
                IpAddress = "0.0.0.0",
                UserAgent = "Blazor",
                Values = values
            });

            if (FillModel.WorkflowTemplateId.HasValue)
            {
                var workflow = await WorkflowFactory.CreateInstanceAsync(FillModel.WorkflowTemplateId.Value, appUser.Id, FillModel.ServiceId);
                submission.WorkflowInstanceId = workflow.Id;
                _db.Update(submission);
                await _db.SaveChangesAsync();
            }

            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Success!",
                text = "Form submitted successfully!",
                icon = "success",
                timer = 2000,
                showConfirmButton = false,
                customClass = new { popup = "swal2-popup" }
            });

            Feedback = "Form submitted successfully!";
            FillModel = null;
            CurrentPage = 0;
            ShowView("list");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Error!",
                text = ex.Message,
                icon = "error",
                timer = 4000,
                showConfirmButton = false,
                customClass = new { popup = "swal2-popup" }
            });
            Feedback = $"Error submitting form: {ex.Message}";
        }
    }

    public class ServiceBuilderModel
    {
        [Required(ErrorMessage = "Service name is required")]
        [StringLength(200, ErrorMessage = "Service name cannot exceed 200 characters")]
        public string Name { get; set; } = string.Empty;

        [StringLength(500, ErrorMessage = "Description cannot exceed 500 characters")]
        public string Description { get; set; } = string.Empty;

        [Range(0, double.MaxValue, ErrorMessage = "Fee must be a positive number")]
        public decimal? ServiceFee { get; set; }

        public ServiceModels.FeeType FeeType { get; set; } = ServiceModels.FeeType.Fixed;

        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public Guid? WorkflowTemplateId { get; set; }
        public Guid? DocumentTemplateId { get; set; }
        public List<FieldBuilderModel> Fields { get; set; } = new();
    }

    public class FieldBuilderModel
    {
        [Required(ErrorMessage = "Field name is required")]
        [StringLength(100, ErrorMessage = "Field name cannot exceed 100 characters")]
        [RegularExpression("^[a-zA-Z0-9_-]+$", ErrorMessage = "Only letters, numbers, underscores and hyphens allowed")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Field label is required")]
        [StringLength(200, ErrorMessage = "Field label cannot exceed 200 characters")]
        public string Label { get; set; } = string.Empty;

        [StringLength(500, ErrorMessage = "Description cannot exceed 500 characters")]
        public string Description { get; set; } = string.Empty;

        public ServiceModels.FieldType Type { get; set; } = ServiceModels.FieldType.Text;
        public bool IsRequired { get; set; }

        [StringLength(500, ErrorMessage = "Placeholder cannot exceed 500 characters")]
        public string Placeholder { get; set; } = string.Empty;

        [StringLength(200, ErrorMessage = "Default value cannot exceed 200 characters")]
        public string? DefaultValue { get; set; }

        public string? OptionsRaw { get; set; }

        public List<string> ParsedOptions
        {
            get
            {
                if (string.IsNullOrWhiteSpace(OptionsRaw))
                    return new List<string>();

                return OptionsRaw
                    .Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
                    .Select(line => line.Trim())
                    .Where(line => !string.IsNullOrWhiteSpace(line))
                    .ToList();
            }
        }
    }

    public class FillServiceModel
    {
        public int ServiceId { get; set; }
        public string ServiceName { get; set; } = string.Empty;
        public string ServiceDescription { get; set; } = string.Empty;
        [Range(0, double.MaxValue, ErrorMessage = "Fee must be a positive number")]
        public decimal? ServiceFee { get; set; }
        public ServiceModels.FeeType FeeType { get; set; } = ServiceModels.FeeType.Fixed;
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public Guid? WorkflowTemplateId { get; set; }
        public Guid? DocumentTemplateId { get; set; }
        public List<FieldFillModel> Fields { get; set; } = new();
    }

    public class FieldFillModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Label { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public ServiceModels.FieldType Type { get; set; }
        public bool IsRequired { get; set; }
        public string Placeholder { get; set; } = string.Empty;
        public string? DefaultValue { get; set; }
        public string? OptionsRaw { get; set; }
        
        public List<string> ParsedOptions
        {
            get
            {
                if (string.IsNullOrWhiteSpace(OptionsRaw))
                    return new List<string>();

                return OptionsRaw
                    .Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
                    .Select(line => line.Trim())
                    .Where(line => !string.IsNullOrWhiteSpace(line))
                    .ToList();
            }
        }
        
        public string Value { get; set; } = string.Empty;
        public Dictionary<string, bool> CheckboxValues { get; set; } = new();
        public Dictionary<string, bool> MultiSelectValues { get; set; } = new();
        public IReadOnlyList<IBrowserFile>? Files { get; set; }
    }

    // Helper method for highlighting search terms
    private string HighlightSearchTerm(string text, string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(text) || string.IsNullOrWhiteSpace(searchTerm))
            return text;

        var index = text.IndexOf(searchTerm, StringComparison.OrdinalIgnoreCase);
        if (index < 0)
            return text;

        var beforeMatch = text.Substring(0, index);
        var match = text.Substring(index, searchTerm.Length);
        var afterMatch = text.Substring(index + searchTerm.Length);

        return $"{beforeMatch}<mark class=\"bg-warning text-dark\">{match}</mark>{afterMatch}";
    }
}