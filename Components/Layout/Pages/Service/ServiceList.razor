@page "/service-list"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using LocalGov360.Data
@using LocalGov360.Services
@using LocalGov360.Data.Models
@using Microsoft.AspNetCore.Html
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using static LocalGov360.Data.Models.ServiceModels
@inject IServiceService ServiceService
@inject IWorkflowFactory WorkflowFactory
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext _db

<PageTitle>Available Services</PageTitle>

<div class="container-fluid py-2">
    <div class="row">
        <div class="col-12">
            @if (!string.IsNullOrWhiteSpace(Feedback))
            {
                <div class="alert @(Feedback.Contains("Error") ? "alert-danger" : "alert-success")" role="alert">
                    <div class="d-flex align-items-center">
                        <i class="fas @(Feedback.Contains("Error") ? "fa-exclamation-circle" : "fa-check-circle") me-2"></i>
                        <span>@Feedback</span>
                    </div>
                    <button type="button" class="btn-close" @onclick="() => Feedback = null"></button>
                </div>
            }

            @if (CurrentView == "select-organization")
            {
                <div class="card my-4">
                    <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                        <div class="bg-black shadow-dark border-radius-lg pt-4 pb-3">
                            <h4 class="text-white text-center mb-0">Local Government Services Portal</h4>
                        </div>
                    </div>
                    <div class="card-body px-4 pb-4">
                        @if (Organizations == null)
                        {
                            <div class="text-center p-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading organizations...</span>
                                </div>
                                <p class="mt-2 text-muted">Loading organizations...</p>
                            </div>
                        }
                        else if (!Organizations.Any())
                        {
                            <div class="text-center p-4">
                                <i class="fas fa-building fa-3x text-muted mb-3"></i>
                                <h4>No organizations available</h4>
                                <p class="text-muted">Please contact your administrator.</p>
                            </div>
                        }
                        else
                        {
                            <div class="row">
                                <div class="col-md-6 mx-auto">
                                    <div class="form-group">
                                        <label class="form-label"> </label>
                                        <select class="form-select" @onchange="OnOrganizationSelected">
                                            <option value=""> Select Local Council </option>
                                            @foreach (var org in Organizations)
                                            {
                                                <option value="@org.Id">@org.Name</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            @if (CurrentView == "services-list")
            {
                <div class="card my-4">
                    <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                        <div class="bg-black shadow-dark border-radius-lg pt-4 pb-3">
                            <h4 class="text-white text-center mb-0">Local Government Services Portal</h4>
                            <div class="ps-3 pb-2 d-flex align-items-center justify-content-end">
                                <div class="d-flex align-items-center me-auto">
                                    <i class="fas fa-building text-white me-2"></i>
                                    <span class="text-white">@SelectedOrganization?.Name</span>
                                </div>
                                <button class="btn btn-sm btn-outline-light me-3" @onclick='() => ShowView("select-organization")'>
                                    <i class="fas fa-exchange-alt me-1"></i>
                                    Change Council
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="px-4 py-3">
                        <h5 class="mb-0">Available Services</h5>
                    </div>
                    <div class="card-body px-0 pb-2">
                        @if (Services == null)
                        {
                            <div class="text-center p-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading services...</span>
                                </div>
                                <p class="mt-2 text-muted">Loading services...</p>
                            </div>
                        }
                        else if (!Services.Any())
                        {
                            <div class="text-center p-4">
                                <i class="fas fa-clipboard-list fa-3x text-muted mb-3"></i>
                                <h4>No services available</h4>
                                <p class="text-muted">This local council has not published any services yet.</p>
                            </div>
                        }
                        else
                        {
                            <div class="row px-3">
                                @foreach (var service in Services.OrderBy(s => s.Name))
                                {
                                    var hasSubmission = UserSubmissions?.Any(s => s.ServiceId == service.Id) ?? false;
                                    <div class="col-md-6 col-lg-4 mb-4">
                                        <div class="card h-100 @(hasSubmission ? "border-dark" : "")">
                                            <div class="card-body">
                                                <div class="d-flex align-items-center mb-3">
                                                    <div class="icon icon-sm border-radius-md bg-gradient-dark me-3">
                                                        <i class="fas fa-file-alt text-white"></i>
                                                    </div>
                                                    <div>
                                                        <h6 class="mb-0">@service.Name</h6>
                                                        <p class="text-xs text-muted mb-0">@service.Fields.Count field@(service.Fields.Count != 1 ? "s" : "")</p>
                                                    </div>
                                                </div>

                                                @if (!string.IsNullOrEmpty(service.Description))
                                                {
                                                    <p class="text-sm mb-3">
                                                        @(service.Description.Length > 100 ? service.Description.Substring(0, 100) + "..." : service.Description)
                                                    </p>
                                                }

                                                @if (hasSubmission)
                                                {
                                                    <div class="alert alert-success mb-3" role="alert">
                                                        <i class="fas fa-check-circle me-2"></i>
                                                        <small>Already submitted</small>
                                                    </div>
                                                }
                                            </div>

                                            <div class="card-footer bg-transparent">
                                                @if (hasSubmission)
                                                {
                                                    <button class="btn btn-success btn-sm w-100" disabled>
                                                        <i class="fas fa-check me-1"></i>
                                                        Application Submitted
                                                    </button>
                                                }
                                                else
                                                {
                                                    <button class="btn btn-dark btn-sm w-100" @onclick="() => StartServiceAsync(service.Id)">
                                                        <i class="fas fa-play me-1"></i>
                                                        Start Application
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            }

            @if (CurrentView == "service-form" && ServiceFormModel != null)
            {
                <div class="card my-4">
                    <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                        <div class="bg-black shadow-dark border-radius-lg pt-4 pb-3">
                            <h4 class="text-white text-center mb-2">@ServiceFormModel.ServiceName</h4>
                            <div class="ps-3 d-flex align-items-center justify-content-between">
                                @if (!string.IsNullOrEmpty(ServiceFormModel.ServiceDescription))
                                {
                                    <p class="text-white mb-0">@ServiceFormModel.ServiceDescription</p>
                                }
                                else
                                {
                                    <div></div>
                                }
                                <div class="d-flex align-items-center gap-3">
                                    <!-- Progress indicator -->
                                    <div class="d-flex align-items-center text-white">
                                        <span class="me-2">Progress:</span>
                                        <div class="progress bg-dark" style="width: 120px; height: 6px;">
                                            <div class="progress-bar bg-white"
                                                 style="width: @(TotalPages > 0 ? ((double)(CurrentPage + 1) / TotalPages) * 100 : 0)%"></div>
                                        </div>
                                        <span class="ms-2 small">Page @(CurrentPage + 1) / @TotalPages</span>
                                    </div>
                                    <button class="btn btn-sm btn-outline-light" @onclick='() => ShowView("services-list")'>
                                        <i class="fas fa-arrow-left me-1"></i>
                                        Back to Services
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <EditForm Model="ServiceFormModel" OnValidSubmit="SubmitServiceFormAsync">
                            <DataAnnotationsValidator />

                            @{
                                var currentPageFields = ServiceFormModel.Fields.Skip(CurrentPage * FieldsPerPage).Take(FieldsPerPage).ToList();
                            }

                            <div class="row g-4">
                                @for (int i = 0; i < currentPageFields.Count; i++)
                                {
                                    var field = currentPageFields[i];
                                    <div class="col-md-6">
                                        <div class="card h-100 border-light">
                                            <div class="card-body">
                                                <label class="form-label fw-bold">
                                                    @field.Label
                                                    @if (field.IsRequired)
                                                    {
                                                        <span class="text-danger">*</span>
                                                    }
                                                </label>

                                                @if (!string.IsNullOrEmpty(field.Description))
                                                {
                                                    <p class="text-muted small mb-2">@field.Description</p>
                                                }

                                                @switch (field.Type)
                                                {
                                                    case ServiceModels.FieldType.TextArea:
                                                        <InputTextArea class="form-control" @bind-Value="field.Value"
                                                                       placeholder="@field.Placeholder" rows="4" />
                                                        break;
                                                    case ServiceModels.FieldType.Select:
                                                        <InputSelect class="form-select" @bind-Value="field.Value">
                                                            <option value="">-- Please select --</option>
                                                            @foreach (var option in field.ParsedOptions)
                                                            {
                                                                <option value="@option">@option</option>
                                                            }
                                                        </InputSelect>
                                                        break;
                                                    case ServiceModels.FieldType.Radio:
                                                        <InputRadioGroup @bind-Value="field.Value">
                                                            @foreach (var option in field.ParsedOptions)
                                                            {
                                                                <div class="form-check mb-1">
                                                                    <InputRadio class="form-check-input" Value="@option" id="@($"radio_{field.Id}_{option}")" />
                                                                    <label class="form-check-label" for="@($"radio_{field.Id}_{option}")">@option</label>
                                                                </div>
                                                            }
                                                        </InputRadioGroup>
                                                        break;
                                                    case ServiceModels.FieldType.Checkbox:
                                                        @foreach (var option in field.ParsedOptions)
                                                        {
                                                            <div class="form-check mb-1">
                                                                <input class="form-check-input" type="checkbox" id="@($"check_{field.Id}_{option}")"
                                                                       @bind="field.CheckboxValues[option]" />
                                                                <label class="form-check-label" for="@($"check_{field.Id}_{option}")">@option</label>
                                                            </div>
                                                        }
                                                        break;
                                                    case ServiceModels.FieldType.File:
                                                        <InputFile class="form-control" OnChange="e => field.Files = e.GetMultipleFiles()" multiple />
                                                        <small class="text-muted">You can select multiple files if needed</small>
                                                        break;
                                                    case ServiceModels.FieldType.Email:
                                                        <InputText type="email" class="form-control" @bind-Value="field.Value" placeholder="@field.Placeholder" />
                                                        break;
                                                    case ServiceModels.FieldType.Date:
                                                        <InputDate class="form-control" @bind-Value="DateValue"
                                                                   @onchange="(e) => field.Value = e.Value?.ToString()" />
                                                        break;
                                                    case ServiceModels.FieldType.Number:
                                                        <InputNumber class="form-control" @bind-Value="NumberValue"
                                                                     @onchange="(e) => field.Value = e.Value?.ToString()" placeholder="@field.Placeholder" />
                                                        break;
                                                    default:
                                                        <InputText type="text" class="form-control" @bind-Value="field.Value" placeholder="@field.Placeholder" />
                                                        break;
                                                }
                                                <ValidationMessage For="@(() => field.Value)" class="text-danger small mt-1" />
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>

                            <!-- Navigation buttons -->
                            <div class="d-flex justify-content-between align-items-center mt-4 pt-4 border-top">
                                <div>
                                    @if (CurrentPage > 0)
                                    {
                                        <button type="button" class="btn btn-outline-secondary btn-lg" @onclick="PreviousPage" disabled="@IsSubmitting">
                                            <i class="fas fa-chevron-left me-2"></i>
                                            Previous
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-outline-secondary btn-lg" @onclick="@(() => ShowView("services-list"))" disabled="@IsSubmitting">
                                            <i class="fas fa-times me-2"></i>
                                            Cancel
                                        </button>
                                    }
                                </div>

                                <div class="text-center">
                                    <small class="text-muted">
                                        Page @(CurrentPage + 1) of @TotalPages
                                    </small>
                                </div>

                                <div>
                                    @if (CurrentPage < TotalPages - 1)
                                    {
                                        <button type="button" class="btn btn-dark btn-lg bg-black" @onclick="NextPage" disabled="@IsSubmitting">
                                            Next
                                            <i class="fas fa-chevron-right ms-2"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="submit" class="btn btn-success btn-lg" disabled="@IsSubmitting">
                                            @if (IsSubmitting)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                                <span>Submitting...</span>
                                            }
                                            else
                                            {
                                                <i class="fas fa-paper-plane me-2"></i>
                                                <span>Submit Application</span>
                                            }
                                        </button>
                                    }
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .alert {
        position: relative;
    }

        .alert .btn-close {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            background: none;
            border: none;
            font-size: 1.2rem;
            line-height: 1;
            color: inherit;
            opacity: 0.5;
        }

            .alert .btn-close:hover {
                opacity: 0.75;
            }

    .icon {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .border-radius-md {
        border-radius: 0.5rem;
    }

    .bg-gradient-dark {
        background: linear-gradient(310deg, #212529 0%, #495057 100%);
    }

    .bg-black {
        background-color: #000000 !important;
    }

    .shadow-dark {
        box-shadow: 0 4px 20px 0 rgba(0, 0, 0, 0.14), 0 7px 10px -5px rgba(33, 37, 41, 0.4);
    }

    .text-white-50 {
        color: rgba(255, 255, 255, 0.5) !important;
    }

    .card-header {
        border-bottom: none;
    }

    .form-check {
        margin-bottom: 0.5rem;
    }

    .form-check-lg .form-check-input {
        width: 1.5rem;
        height: 1.5rem;
        margin-top: 0.125rem;
    }

    .form-check-lg .form-check-label {
        padding-left: 0.5rem;
        line-height: 1.8;
    }

    .form-field-container {
        min-height: 200px;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .progress {
        border-radius: 3px;
    }

    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
    }

    .btn-lg {
        padding: 0.75rem 1.5rem;
        font-size: 1.1rem;
    }

    .form-control-lg, .form-select-lg {
        font-size: 1.1rem;
        padding: 0.75rem 1rem;
    }
</style>

@code
{
    private string CurrentView = "select-organization";
    private string? Feedback;
    private List<Organization>? Organizations;
    private Organization? SelectedOrganization;
    private List<ServiceModels.Service>? Services;
    private List<ServiceSubmission>? UserSubmissions;
    private UserServiceFormModel? ServiceFormModel;
    private bool IsSubmitting = false;
    private DateTime? DateValue;
    private decimal? NumberValue;

    // Pagination for form fields
    private int CurrentPage = 0;
    private const int FieldsPerPage = 8; // 8 fields per page (4 left, 4 right)
    private int TotalPages => ServiceFormModel?.Fields.Count > 0 ? (int)Math.Ceiling((double)ServiceFormModel.Fields.Count / FieldsPerPage) : 1;

    private ClaimsPrincipal user;
    private ApplicationUser appUser;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            appUser = await UserManager.GetUserAsync(user);
        }

        await LoadOrganizationsAsync();
    }

    private async Task LoadOrganizationsAsync()
    {
        try
        {
            Organizations = await _db.Organisations
                .OrderBy(o => o.Name)
                .Select(o => new Organization { Id = o.Id, Name = o.Name })
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading organizations: {ex}");
            Feedback = $"Error loading organizations: {ex.Message}";
        }
    }

    private async Task OnOrganizationSelected(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var orgId))
        {
            SelectedOrganization = Organizations?.FirstOrDefault(o => o.Id == orgId);
            if (SelectedOrganization != null)
            {
                await LoadServicesForOrganizationAsync(orgId);
                await LoadUserSubmissionsAsync();
                ShowView("services-list");
            }
        }
    }

    private async Task LoadServicesForOrganizationAsync(Guid organizationId)
    {
        try
        {
            Services = await _db.Services
                .Where(s => s.OrganisationId == organizationId && s.IsActive)
                .Include(s => s.Fields)
                .Select(s => new ServiceModels.Service
                {
                    Id = s.Id,
                    Name = s.Name,
                    Description = s.Description ?? "",
                    WorkflowTemplateId = s.WorkflowTemplateId,
                    DocumentTemplateId = s.DocumentTemplateId,
                    Fields = s.Fields.Select(f => new ServiceModels.ServiceField
                    {
                        Id = f.Id,
                        Name = f.Name ?? "",
                        Label = f.Label ?? "",
                        Description = f.Description ?? "",
                        FieldType = f.FieldType,
                        IsRequired = f.IsRequired,
                        Placeholder = f.Placeholder ?? "",
                        DefaultValue = f.DefaultValue ?? "",
                        DisplayOrder = f.DisplayOrder,
                        Options = f.Options ?? new List<ServiceModels.FieldOption>()
                    }).OrderBy(f => f.DisplayOrder).ToList()
                })
                .OrderBy(s => s.Name)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading services: {ex}");
            Feedback = $"Error loading services: {ex.Message}";
            Services = new List<ServiceModels.Service>();
        }
    }

    private async Task LoadUserSubmissionsAsync()
    {
        try
        {
            if (appUser != null)
            {
                var submittedBy = appUser.UserName ?? appUser.Email ?? "";
                UserSubmissions = await _db.ServiceSubmissions
                    .Where(s => s.SubmittedBy == submittedBy)
                    .ToListAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user submissions: {ex}");
        }
    }

    private async Task StartServiceAsync(int serviceId)
    {
        try
        {
            // Check if user has already submitted this service
            if (UserSubmissions?.Any(s => s.ServiceId == serviceId) == true)
            {
                Feedback = "You have already submitted an application for this service.";
                return;
            }

            var service = Services?.FirstOrDefault(s => s.Id == serviceId);
            if (service == null)
            {
                try
                {
                    service = await ServiceService.GetServiceAsync(serviceId);
                    if (service == null)
                    {
                        Feedback = $"Service not found (ID: {serviceId})";
                        return;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error loading service via ServiceService: {ex.Message}");
                    Feedback = $"Service not found (ID: {serviceId})";
                    return;
                }
            }

            ServiceFormModel = new UserServiceFormModel
            {
                ServiceId = service.Id,
                ServiceName = service.Name,
                ServiceDescription = service.Description,
                WorkflowTemplateId = service.WorkflowTemplateId,
                DocumentTemplateId = service.DocumentTemplateId,
                Fields = service.Fields?.Select(f => new UserFieldModel
                {
                    Id = f.Id,
                    Name = f.Name,
                    Label = f.Label,
                    Description = f.Description,
                    Type = f.FieldType,
                    IsRequired = f.IsRequired,
                    Placeholder = f.Placeholder,
                    DefaultValue = f.DefaultValue,
                    OptionsRaw = string.Join(Environment.NewLine, f.Options?.Select(o => o.Value) ?? new List<string>()),
                    Value = f.DefaultValue ?? "",
                    CheckboxValues = f.Options?.ToDictionary(o => o.Value, o => false) ?? new Dictionary<string, bool>()
                }).ToList() ?? new List<UserFieldModel>()
            };

            // Reset to first page
            CurrentPage = 0;
            ShowView("service-form");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in StartServiceAsync: {ex}");
            Feedback = $"Error loading service form: {ex.Message}";
        }
    }

    private void NextPage()
    {
        if (ServiceFormModel != null && CurrentPage < TotalPages - 1)
        {
            // Validate current page fields if required
            var currentPageFields = ServiceFormModel.Fields.Skip(CurrentPage * FieldsPerPage).Take(FieldsPerPage);

            foreach (var field in currentPageFields.Where(f => f.IsRequired))
            {
                if (field.Type == ServiceModels.FieldType.Checkbox)
                {
                    if (!field.CheckboxValues.Any(kv => kv.Value))
                    {
                        Feedback = $"Field '{field.Label}' is required";
                        return;
                    }
                }
                else if (string.IsNullOrWhiteSpace(field.Value))
                {
                    Feedback = $"Field '{field.Label}' is required";
                    return;
                }
            }

            CurrentPage++;
            Feedback = null; // Clear any validation messages
            StateHasChanged();
        }
    }

    private void PreviousPage()
    {
        if (CurrentPage > 0)
        {
            CurrentPage--;
            Feedback = null; // Clear any validation messages
            StateHasChanged();
        }
    }

    private async Task SubmitServiceFormAsync()
    {
        if (ServiceFormModel == null) return;

        IsSubmitting = true;
        try
        {
            // Validate all required fields
            foreach (var field in ServiceFormModel.Fields.Where(f => f.IsRequired))
            {
                if (field.Type == ServiceModels.FieldType.Checkbox)
                {
                    if (!field.CheckboxValues.Any(kv => kv.Value))
                    {
                        Feedback = $"Field '{field.Label}' is required";
                        return;
                    }
                }
                else if (string.IsNullOrWhiteSpace(field.Value))
                {
                    Feedback = $"Field '{field.Label}' is required";
                    return;
                }
            }

            var values = new List<SubmissionValue>();

            foreach (var field in ServiceFormModel.Fields)
            {
                if (field.Type == ServiceModels.FieldType.Checkbox)
                {
                    foreach (var kv in field.CheckboxValues.Where(kv => kv.Value))
                    {
                        values.Add(new SubmissionValue
                        {
                            FieldId = field.Id,
                            Value = kv.Key
                        });
                    }
                }
                else if (!string.IsNullOrEmpty(field.Value))
                {
                    values.Add(new SubmissionValue
                    {
                        FieldId = field.Id,
                        Value = field.Value
                    });
                }
            }

            var submittedBy = appUser?.UserName ?? appUser?.Email ?? "Anonymous";
            var submission = await ServiceService.SubmitServiceAsync(ServiceFormModel.ServiceId, new SubmitServiceRequest
            {
                SubmittedBy = submittedBy,
                IpAddress = "0.0.0.0",
                UserAgent = "User Portal",
                Values = values
            });

            // Start workflow if template is assigned
            if (ServiceFormModel.WorkflowTemplateId.HasValue && appUser != null)
            {
                var workflow = await WorkflowFactory.CreateInstanceAsync(
                    ServiceFormModel.WorkflowTemplateId.Value,
                    appUser.Id,
                    ServiceFormModel.ServiceId);

                submission.WorkflowInstanceId = workflow.Id;
                _db.Update(submission);
                await _db.SaveChangesAsync();
            }

            // Reload user submissions to reflect the new submission
            await LoadUserSubmissionsAsync();

            Feedback = "Thank you for your submission. Please check the task list to see the next step.";
            ServiceFormModel = null;
            CurrentPage = 0;
            ShowView("services-list");
        }
        catch (Exception ex)
        {
            Feedback = $"Error submitting application: {ex.Message}";
        }
        finally
        {
            IsSubmitting = false;
        }
    }

    private void ShowView(string view)
    {
        CurrentView = view;
        Feedback = null;
        if (view != "service-form")
        {
            CurrentPage = 0; // Reset page index when leaving form
        }
        StateHasChanged();
    }

    public class Organization
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    public class UserServiceFormModel
    {
        public int ServiceId { get; set; }
        public string ServiceName { get; set; } = string.Empty;
        public string ServiceDescription { get; set; } = string.Empty;
        public Guid? WorkflowTemplateId { get; set; }
        public Guid? DocumentTemplateId { get; set; }
        public List<UserFieldModel> Fields { get; set; } = new();
    }

    public class UserFieldModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Label { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public ServiceModels.FieldType Type { get; set; }
        public bool IsRequired { get; set; }
        public string Placeholder { get; set; } = string.Empty;
        public string? DefaultValue { get; set; }
        public string? OptionsRaw { get; set; }

        public List<string> ParsedOptions =>
            OptionsRaw?.Split(Environment.NewLine,
                StringSplitOptions.RemoveEmptyEntries |
                StringSplitOptions.TrimEntries)
            .ToList() ?? new();

        [Required]
        public string Value { get; set; } = string.Empty;
        public Dictionary<string, bool> CheckboxValues { get; set; } = new();
        public IReadOnlyList<IBrowserFile>? Files { get; set; }
    }
}
