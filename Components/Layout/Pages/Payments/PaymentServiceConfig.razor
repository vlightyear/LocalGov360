@page "/paymentservice"
@using LocalGov360.Data
@using LocalGov360.Data.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SignInManager<ApplicationUser> SignInManager
@attribute [Authorize(Roles = "developer,CouncilAdmin")]
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IJSRuntime JS
@inject UserManager<ApplicationUser> UserManager

<style>
    .action-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .header-buttons {
        display: flex;
        gap: 1rem;
    }

    /* Modern Form Styling */
    .modern-form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
        max-height: 400px;
        overflow-y: auto;
        padding-right: 0.5rem;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        margin-bottom: 1rem;
    }

    .form-span-2 {
        grid-column: 1 / -1;
    }

    .modern-label {
        font-weight: 600;
        color: #344767;
        font-size: 0.8rem;
        margin-bottom: 0.4rem;
        letter-spacing: 0.02em;
    }

    .input-wrapper {
        position: relative;
    }

    .modern-input {
        width: 100%;
        padding: 0.6rem 0.8rem;
        border: 1px solid #d2d6da;
        border-radius: 0.4rem;
        font-size: 0.8rem;
        transition: all 0.15s ease-in-out;
        background-color: #fff;
        color: #495057;
    }

        .modern-input:focus {
            outline: none;
            border-color: #344767;
            box-shadow: 0 0 0 0.15rem rgba(52, 71, 103, 0.1);
            background-color: #fff;
        }

        .modern-input::placeholder {
            color: #adb5bd;
            opacity: 1;
            font-size: 0.75rem;
        }

    .validation-message {
        color: #dc3545;
        font-size: 0.7rem;
        margin-top: 0.2rem;
        font-weight: 500;
    }

    .form-helper-text {
        color: #6c757d;
        font-size: 0.7rem;
        margin-top: 0.2rem;
        font-style: italic;
    }

    /* Modern Button Styling */
    .form-actions {
        display: flex;
        gap: 0.8rem;
        justify-content: center;
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 1px solid #dee2e6;
    }

    .btn-modern {
        padding: 0.6rem 1.5rem;
        border: none;
        border-radius: 0.4rem;
        font-weight: 600;
        font-size: 0.8rem;
        cursor: pointer;
        transition: all 0.15s ease-in-out;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        letter-spacing: 0.02em;
    }

    .btn-primary {
        background: linear-gradient(135deg, #344767 0%, #2c3e50 100%);
        color: white;
        box-shadow: 0 4px 6px rgba(52, 71, 103, 0.3);
    }

        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 6px 12px rgba(52, 71, 103, 0.4);
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
        }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
        box-shadow: 0 4px 6px rgba(108, 117, 125, 0.3);
    }

        .btn-secondary:hover {
            transform: translateY(-1px);
            box-shadow: 0 6px 12px rgba(108, 117, 125, 0.4);
            background-color: #5a6268;
        }

    /* Alert Styling */
    .alert {
        padding: 0.75rem 1.25rem;
        margin-bottom: 1rem;
        border: 1px solid transparent;
        border-radius: 0.5rem;
        font-weight: 500;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
       

    {
        .modern-form-grid

    {
        grid-template-columns: 1fr;
        gap: 1.5rem;
    }

    .form-span-2 {
        grid-column: 1;
    }

    .form-actions {
        flex-direction: column;
    }

    .btn-modern {
        width: 100%;
    }

    }
</style>

<div class="container-fluid py-2">
    <div class="row">
        <!-- Form Panel - Show on the left side when form is active -->
        @if (showForm)
        {
            <div class="col-lg-4 order-1">
                <div class="card my-4">
                    <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                        <div class="bg-gradient-dark shadow-dark border-radius-lg pt-4 pb-3">
                            <h6 class="text-white text-capitalize ps-3">
                                @if (isEditing)
                                {
                                    <text>Edit Payment Configuration</text>
                                }
                                else
                                {
                                    <text>Add New Payment Configuration</text>
                                }
                            </h6>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                @errorMessage
                            </div>
                        }
                        <EditForm Model="@currentConfig" OnValidSubmit="SaveConfiguration">
                            <DataAnnotationsValidator />
                            <div class="modern-form-grid">
                                <div class="form-group">
                                    <label for="serviceCode" class="modern-label">Service Code</label>
                                    <div class="input-wrapper">
                                        <InputText id="serviceCode" @bind-Value="currentConfig.ServiceCode" class="modern-input" placeholder="Service code" />
                                        <ValidationMessage For="@(() => currentConfig.ServiceCode)" class="validation-message" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="countryCode" class="modern-label">Country Code</label>
                                    <div class="input-wrapper">
                                        <InputText id="countryCode" @bind-Value="currentConfig.CountryCode" class="modern-input" placeholder="Country code" />
                                        <ValidationMessage For="@(() => currentConfig.CountryCode)" class="validation-message" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="currencyCode" class="modern-label">Currency Code</label>
                                    <div class="input-wrapper">
                                        <InputText id="currencyCode" @bind-Value="currentConfig.CurrencyCode" class="modern-input" placeholder="Currency code" />
                                        <ValidationMessage For="@(() => currentConfig.CurrencyCode)" class="validation-message" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="paymentModeCode" class="modern-label">Payment Mode</label>
                                    <div class="input-wrapper">
                                        <InputText id="paymentModeCode" @bind-Value="currentConfig.PaymentModeCode" class="modern-input" placeholder="Payment mode" />
                                        <ValidationMessage For="@(() => currentConfig.PaymentModeCode)" class="validation-message" />
                                    </div>
                                </div>

                                <div class="form-group form-span-2">
                                    <label for="apiBaseUrl" class="modern-label">API Base URL</label>
                                    <div class="input-wrapper">
                                        <InputText id="apiBaseUrl" @bind-Value="currentConfig.ApiBaseUrl" class="modern-input" placeholder="https://api.example.com" />
                                        <ValidationMessage For="@(() => currentConfig.ApiBaseUrl)" class="validation-message" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="clientId" class="modern-label">Client ID</label>
                                    <div class="input-wrapper">
                                        <InputText id="clientId" @bind-Value="currentConfig.ClientId" class="modern-input" placeholder="Client ID" />
                                        <ValidationMessage For="@(() => currentConfig.ClientId)" class="validation-message" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="clientSecret" class="modern-label">Client Secret</label>
                                    <div class="input-wrapper">
                                        <InputText id="clientSecret" @bind-Value="currentConfig.ClientSecret" class="modern-input" placeholder="Client secret" type="password" />
                                        <ValidationMessage For="@(() => currentConfig.ClientSecret)" class="validation-message" />
                                    </div>
                                </div>

                                <div class="form-group form-span-2">
                                    <label for="apiKey" class="modern-label">API Key</label>
                                    <div class="input-wrapper">
                                        <InputText id="apiKey" @bind-Value="currentConfig.ApiKey" class="modern-input" placeholder="API key" type="password" />
                                        <ValidationMessage For="@(() => currentConfig.ApiKey)" class="validation-message" />
                                    </div>
                                </div>

                                <div class="form-group form-span-2">
                                    <label for="authTokenRequestUrl" class="modern-label">Auth Token URL</label>
                                    <div class="input-wrapper">
                                        <InputText id="authTokenRequestUrl" @bind-Value="currentConfig.AuthTokenRequestUrl" class="modern-input" placeholder="Auth token request URL" />
                                        <ValidationMessage For="@(() => currentConfig.AuthTokenRequestUrl)" class="validation-message" />
                                    </div>
                                </div>

                                <div class="form-group form-span-2">
                                    <label for="checkoutRequestUrl" class="modern-label">Checkout URL</label>
                                    <div class="input-wrapper">
                                        <InputText id="checkoutRequestUrl" @bind-Value="currentConfig.CheckoutRequestUrl" class="modern-input" placeholder="Checkout request URL" />
                                        <ValidationMessage For="@(() => currentConfig.CheckoutRequestUrl)" class="validation-message" />
                                    </div>
                                </div>

                                <div class="form-group form-span-2">
                                    <label for="callbackUrl" class="modern-label">Callback URL</label>
                                    <div class="input-wrapper">
                                        <InputText id="callbackUrl" @bind-Value="currentConfig.CallbackUrl" class="modern-input" placeholder="Callback URL" />
                                        <ValidationMessage For="@(() => currentConfig.CallbackUrl)" class="validation-message" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="successRedirectUrl" class="modern-label">Success URL</label>
                                    <div class="input-wrapper">
                                        <InputText id="successRedirectUrl" @bind-Value="currentConfig.SuccessRedirectUrl" class="modern-input" placeholder="Success redirect URL" />
                                        <ValidationMessage For="@(() => currentConfig.SuccessRedirectUrl)" class="validation-message" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="failRedirectUrl" class="modern-label">Fail URL</label>
                                    <div class="input-wrapper">
                                        <InputText id="failRedirectUrl" @bind-Value="currentConfig.FailRedirectUrl" class="modern-input" placeholder="Fail redirect URL" />
                                        <ValidationMessage For="@(() => currentConfig.FailRedirectUrl)" class="validation-message" />
                                    </div>
                                </div>
                            </div>

                            <div class="form-actions">
                                <button type="submit" class="btn-modern btn-primary">
                                    <i class="fas fa-@(isEditing ? "save" : "plus") me-2"></i>
                                    @if (isEditing)
                                    {
                                        <text>Update Configuration</text>
                                    }
                                    else
                                    {
                                        <text>Create Configuration</text>
                                    }
                                </button>
                                <button type="button" class="btn-modern btn-secondary" @onclick="CancelForm">
                                    <i class="fas fa-times me-2"></i>
                                    Cancel
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        }

        <!-- Configurations List -->
        <div class="@(showForm ? "col-lg-8 order-2" : "col-12")">
            <div class="card my-4">
                <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                    <div class="bg-gradient-dark shadow-dark border-radius-lg pt-4 pb-3">
                        <h6 class="text-white text-capitalize ps-3">Payment Service Configurations</h6>
                        <div class="ps-3 pb-2 d-flex align-items-center header-buttons">
                            <button class="btn btn-sm btn-outline-light" @onclick="LoadConfigurations">
                                <i class="fas fa-sync-alt me-1"></i> Refresh
                            </button>
                            @if (currentUserOrgId.HasValue)
                            {
                                <button class="btn btn-sm btn-outline-light" @onclick="ShowCreateForm">
                                    <i class="fas fa-plus-circle me-1"></i> Add Configuration
                                </button>
                            }
                        </div>
                    </div>
                </div>
                <div class="card-body px-0 pb-2">
                    @if (!string.IsNullOrEmpty(errorMessage) && !showForm)
                    {
                        <div class="alert alert-danger mx-3" role="alert">
                            @errorMessage
                        </div>
                    }
                    @if (isLoading)
                    {
                        <div class="text-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (configurations.Any())
                    {
                        <div class="table-responsive p-0">
                            <table class="table align-items-center mb-0">
                                <thead>
                                    <tr>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Service Code</th>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Country Code</th>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Currency Code</th>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">API Base URL</th>
                                        <th class="text-secondary opacity-7">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var config in configurations)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex px-2 py-1">
                                                    <div class="d-flex flex-column justify-content-center">
                                                        <h6 class="mb-0 text-sm">@config.ServiceCode</h6>
                                                        <p class="text-xs text-secondary mb-0">@config.PaymentModeCode</p>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <p class="text-xs text-secondary mb-0">@config.CountryCode</p>
                                            </td>
                                            <td>
                                                <p class="text-xs text-secondary mb-0">@config.CurrencyCode</p>
                                            </td>
                                            <td>
                                                <p class="text-xs text-secondary mb-0">@config.ApiBaseUrl</p>
                                            </td>
                                            <td class="align-middle">
                                                @if (config.OrganisationId == currentUserOrgId)
                                                {
                                                    <div class="btn-group action-buttons">
                                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => EditConfiguration(config)">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(config)">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <span class="text-xs text-secondary">No actions available</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center p-4">
                            <p class="text-muted">No configurations found.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<TinggConfiguration> configurations = new();
    private TinggConfiguration currentConfig = new();
    private bool isLoading = true;
    private bool showForm = false;
    private bool isEditing = false;
    private string errorMessage = string.Empty;
    private Guid? currentUserOrgId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var principal = authState.User;
        var user = await UserManager.GetUserAsync(principal);
        currentUserOrgId = user?.OrganisationId;

        if (!currentUserOrgId.HasValue)
        {
            errorMessage = "User organization not found.";
            return;
        }

        await LoadConfigurations();
    }

    private async Task LoadConfigurations()
    {
        isLoading = true;
        configurations.Clear();
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            using var context = DbContextFactory.CreateDbContext();
            configurations = await context.TinggConfigurations
                .Where(c => c.OrganisationId == currentUserOrgId)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading configurations: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowCreateForm()
    {
        if (!currentUserOrgId.HasValue)
        {
            errorMessage = "User organization not found.";
            return;
        }

        currentConfig = new TinggConfiguration
        {
            Id = Guid.Empty,
            OrganisationId = currentUserOrgId.Value
        };
        isEditing = false;
        showForm = true;
        errorMessage = string.Empty;
        StateHasChanged();
    }

    private void EditConfiguration(TinggConfiguration config)
    {
        if (!currentUserOrgId.HasValue)
        {
            errorMessage = "User organization not found.";
            return;
        }

        if (config.OrganisationId != currentUserOrgId)
        {
            errorMessage = "You are not authorized to edit this configuration.";
            return;
        }

        currentConfig = new TinggConfiguration
        {
            Id = config.Id,
            OrganisationId = config.OrganisationId,
            ApiBaseUrl = config.ApiBaseUrl,
            ApiKey = config.ApiKey,
            AuthTokenRequestUrl = config.AuthTokenRequestUrl,
            CallbackUrl = config.CallbackUrl,
            CheckoutRequestUrl = config.CheckoutRequestUrl,
            ClientId = config.ClientId,
            ClientSecret = config.ClientSecret,
            CountryCode = config.CountryCode,
            CurrencyCode = config.CurrencyCode,
            FailRedirectUrl = config.FailRedirectUrl,
            PaymentModeCode = config.PaymentModeCode,
            ServiceCode = config.ServiceCode,
            SuccessRedirectUrl = config.SuccessRedirectUrl
        };
        isEditing = true;
        showForm = true;
        errorMessage = string.Empty;
        StateHasChanged();
    }

    private void CancelForm()
    {
        showForm = false;
        isEditing = false;
        currentConfig = new TinggConfiguration();
        errorMessage = string.Empty;
        StateHasChanged();
    }

    private async Task SaveConfiguration()
    {
        if (!currentUserOrgId.HasValue)
        {
            errorMessage = "User organization not found.";
            return;
        }

        errorMessage = string.Empty;
        try
        {
            using var context = DbContextFactory.CreateDbContext();

            if (currentConfig.Id == Guid.Empty)
            {
                // Create new - OrganizationId is already set from current user
                currentConfig.Id = Guid.NewGuid();
                context.TinggConfigurations.Add(currentConfig);
            }
            else
            {
                // Update existing - verify OrganizationId
                var existingConfig = await context.TinggConfigurations.FindAsync(currentConfig.Id);
                if (existingConfig == null)
                {
                    errorMessage = "Configuration not found.";
                    return;
                }
                if (existingConfig.OrganisationId != currentUserOrgId)
                {
                    errorMessage = "You are not authorized to update this configuration.";
                    return;
                }

                // Update all fields except OrganizationId
                existingConfig.ApiBaseUrl = currentConfig.ApiBaseUrl;
                existingConfig.ApiKey = currentConfig.ApiKey;
                existingConfig.AuthTokenRequestUrl = currentConfig.AuthTokenRequestUrl;
                existingConfig.CallbackUrl = currentConfig.CallbackUrl;
                existingConfig.CheckoutRequestUrl = currentConfig.CheckoutRequestUrl;
                existingConfig.ClientId = currentConfig.ClientId;
                existingConfig.ClientSecret = currentConfig.ClientSecret;
                existingConfig.CountryCode = currentConfig.CountryCode;
                existingConfig.CurrencyCode = currentConfig.CurrencyCode;
                existingConfig.FailRedirectUrl = currentConfig.FailRedirectUrl;
                existingConfig.PaymentModeCode = currentConfig.PaymentModeCode;
                existingConfig.ServiceCode = currentConfig.ServiceCode;
                existingConfig.SuccessRedirectUrl = currentConfig.SuccessRedirectUrl;
            }

            await context.SaveChangesAsync();
            await LoadConfigurations();
            CancelForm();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving configuration: {ex.Message}";
        }
    }

    private async Task ConfirmDelete(TinggConfiguration config)
    {
        if (!currentUserOrgId.HasValue)
        {
            errorMessage = "User organization not found.";
            return;
        }

        if (config.OrganisationId != currentUserOrgId)
        {
            errorMessage = "You are not authorized to delete this configuration.";
            return;
        }

        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the configuration for {config.ServiceCode}?");
        if (confirmed)
        {
            await DeleteConfiguration(config);
        }
    }

    private async Task DeleteConfiguration(TinggConfiguration config)
    {
        if (!currentUserOrgId.HasValue)
        {
            errorMessage = "User organization not found.";
            return;
        }

        if (config.OrganisationId != currentUserOrgId)
        {
            errorMessage = "You are not authorized to delete this configuration.";
            return;
        }

        errorMessage = string.Empty;
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            context.TinggConfigurations.Remove(config);
            await context.SaveChangesAsync();
            await LoadConfigurations();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting configuration: {ex.Message}";
        }
    }
}