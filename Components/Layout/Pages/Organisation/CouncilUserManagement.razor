@page "/council-users"
@using LocalGov360.Data
@using LocalGov360.Data.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@attribute [Authorize(Roles = "developer,CouncilAdmin,admin")]

<PageTitle>Users Management</PageTitle>

<style>
    .action-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .header-buttons {
        display: flex;
        gap: 1rem;
    }

    /* Modern Form Styling */
    .modern-form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
        margin-bottom: 2rem;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

    .form-span-2 {
        grid-column: 1 / -1;
    }

    .modern-label {
        font-weight: 600;
        color: #344767;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
        letter-spacing: 0.02em;
    }

    .input-wrapper {
        position: relative;
    }

    .modern-input {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid #d2d6da;
        border-radius: 0.5rem;
        font-size: 0.875rem;
        transition: all 0.15s ease-in-out;
        background-color: #fff;
        color: #495057;
    }

        .modern-input:focus {
            outline: none;
            border-color: #344767;
            box-shadow: 0 0 0 0.2rem rgba(52, 71, 103, 0.1);
            background-color: #fff;
        }

        .modern-input::placeholder {
            color: #adb5bd;
            opacity: 1;
        }

    .organization-readonly {
        background-color: #f8f9fa !important;
        color: #6c757d !important;
        cursor: not-allowed;
    }

    .validation-message {
        color: #dc3545;
        font-size: 0.75rem;
        margin-top: 0.25rem;
        font-weight: 500;
    }

    .form-helper-text {
        color: #6c757d;
        font-size: 0.75rem;
        margin-top: 0.25rem;
        font-style: italic;
    }

    /* Modern Checkbox Styling */
    .checkbox-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
        gap: 0.75rem;
        max-height: 150px;
        overflow-y: auto;
    }

    .modern-checkbox {
        position: relative;
    }

    .checkbox-input {
        position: absolute;
        opacity: 0;
        cursor: pointer;
    }

    .checkbox-label {
        display: flex;
        align-items: center;
        cursor: pointer;
        font-size: 0.8rem;
        color: #495057;
        font-weight: 500;
        padding: 0.4rem 0.6rem;
        border-radius: 0.25rem;
        transition: background-color 0.15s ease-in-out;
    }

        .checkbox-label:hover {
            background-color: #f8f9fa;
        }

    .checkbox-custom {
        width: 16px;
        height: 16px;
        border: 2px solid #d2d6da;
        border-radius: 0.25rem;
        margin-right: 0.6rem;
        position: relative;
        transition: all 0.15s ease-in-out;
        background-color: #fff;
        flex-shrink: 0;
    }

    .checkbox-input:checked + .checkbox-label .checkbox-custom {
        background-color: #344767;
        border-color: #344767;
    }

        .checkbox-input:checked + .checkbox-label .checkbox-custom::after {
            content: '\2713';
            position: absolute;
            color: white;
            font-size: 10px;
            font-weight: bold;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

    .checkbox-input:focus + .checkbox-label .checkbox-custom {
        box-shadow: 0 0 0 0.2rem rgba(52, 71, 103, 0.1);
    }

    /* Modern Button Styling */
    .form-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-top: 2rem;
        padding-top: 2rem;
        border-top: 1px solid #dee2e6;
    }

    .btn-modern {
        padding: 0.75rem 2rem;
        border: none;
        border-radius: 0.5rem;
        font-weight: 600;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.15s ease-in-out;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        letter-spacing: 0.02em;
    }

    .btn-primary {
        background: linear-gradient(135deg, #344767 0%, #2c3e50 100%);
        color: white;
        box-shadow: 0 4px 6px rgba(52, 71, 103, 0.3);
    }

        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 6px 12px rgba(52, 71, 103, 0.4);
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
        }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
        box-shadow: 0 4px 6px rgba(108, 117, 125, 0.3);
    }

        .btn-secondary:hover {
            transform: translateY(-1px);
            box-shadow: 0 6px 12px rgba(108, 117, 125, 0.4);
            background-color: #5a6268;
        }

    /* Modern Radio Button Styling */
    .radio-group {
        display: flex;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .radio-option {
        display: flex;
        align-items: center;
        cursor: pointer;
        font-size: 0.875rem;
        color: #495057;
        font-weight: 500;
    }

    .radio-input {
        width: 18px;
        height: 18px;
        border: 2px solid #d2d6da;
        border-radius: 50%;
        margin-right: 0.75rem;
        position: relative;
        transition: all 0.15s ease-in-out;
        background-color: #fff;
        cursor: pointer;
    }

        .radio-input:checked {
            border-color: #344767;
            background-color: #344767;
        }

            .radio-input:checked::after {
                content: '';
                position: absolute;
                width: 8px;
                height: 8px;
                border-radius: 50%;
                background-color: white;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
            }

    /* Form Check Group */
    .form-check-group {
        border: 1px solid #dee2e6;
        border-radius: 0.5rem;
        padding: 0.75rem;
        max-height: 160px;
        overflow-y: auto;
        background-color: #f8f9fa;
    }

    /* Role Badge Styling */
    .role-badge {
        display: inline-block;
        padding: 0.25em 0.4em;
        font-size: 75%;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 0.25rem;
        margin-right: 0.25rem;
    }

    .system-role {
        background-color: #6f42c1;
        color: white;
    }

    .org-role {
        background-color: #20c997;
        color: white;
    }

    /* Alert Styling */
    .alert {
        padding: 0.75rem 1.25rem;
        margin-bottom: 1rem;
        border: 1px solid transparent;
        border-radius: 0.5rem;
        font-weight: 500;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }

    .roles-table-actions {
        white-space: nowrap;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .modern-form-grid

    {
        grid-template-columns: 1fr;
        gap: 1.5rem;
    }

    .form-span-2 {
        grid-column: 1;
    }

    .checkbox-grid {
        grid-template-columns: 1fr;
    }

    .form-actions {
        flex-direction: column;
    }

    .btn-modern {
        width: 100%;
    }

    .radio-group {
        flex-direction: column;
        gap: 0.5rem;
    }

    }
</style>

<div class="container-fluid py-2">
    <div class="row">
        <!-- Form Panel - Show on the left side when form is active -->
        @if (showForm)
        {
            <div class="col-lg-4 order-1">
                <div class="card my-4">
                    <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                        <div class="bg-gradient-dark shadow-dark border-radius-lg pt-4 pb-3">
                            <h6 class="text-white text-capitalize ps-3">
                                @if (isEditing)
                                {
                                    <text>Edit User</text>
                                }
                                else if (isCreatingUser)
                                {
                                    <text>Add New User</text>
                                }
                                else if (isCreatingRole)
                                {
                                    <text>Add New Role</text>
                                }
                                else if (isEditingRole)
                                {
                                    <text>Edit Role</text>
                                }
                                else if (isManagingRoles)
                                {
                                    <text>Manage User Roles</text>
                                }
                                else if (isViewingRoles)
                                {
                                    <text>Manage Roles</text>
                                }
                            </h6>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (isCreatingUser)
                        {
                            <EditForm Model="@newUser" OnValidSubmit="CreateUser">
                                <DataAnnotationsValidator />
                                <div class="modern-form-grid">
                                    <div class="form-group">
                                        <label for="email" class="modern-label">Email</label>
                                        <div class="input-wrapper">
                                            <InputText id="email" @bind-Value="newUser.Email" class="modern-input" placeholder="Enter email" />
                                            <ValidationMessage For="@(() => newUser.Email)" class="validation-message" />
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label for="username" class="modern-label">Username</label>
                                        <div class="input-wrapper">
                                            <InputText id="username" @bind-Value="newUser.UserName" class="modern-input" placeholder="Enter username" />
                                            <ValidationMessage For="@(() => newUser.UserName)" class="validation-message" />
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label for="firstname" class="modern-label">First Name</label>
                                        <div class="input-wrapper">
                                            <InputText id="firstname" @bind-Value="newUser.Firstname" class="modern-input" placeholder="Enter first name" />
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label for="lastname" class="modern-label">Last Name</label>
                                        <div class="input-wrapper">
                                            <InputText id="lastname" @bind-Value="newUser.Lastname" class="modern-input" placeholder="Enter last name" />
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label for="password" class="modern-label">Password</label>
                                        <div class="input-wrapper">
                                            <InputText id="password" type="password" @bind-Value="newUser.Password" class="modern-input" placeholder="Enter password" />
                                            <ValidationMessage For="@(() => newUser.Password)" class="validation-message" />
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label for="confirmPassword" class="modern-label">Confirm Password</label>
                                        <div class="input-wrapper">
                                            <InputText id="confirmPassword" type="password" @bind-Value="newUser.ConfirmPassword" class="modern-input" placeholder="Confirm password" />
                                            <ValidationMessage For="@(() => newUser.ConfirmPassword)" class="validation-message" />
                                        </div>
                                    </div>

                                    @if (isDeveloper)
                                    {
                                        <div class="form-group form-span-2">
                                            <label class="modern-label">Organization</label>
                                            <div class="radio-group">
                                                <label class="radio-option">
                                                    <input type="radio" name="orgSelection" class="radio-input"
                                                           checked="@(!newUser.UseNewOrganisation)"
                                                           @onchange="@(() => SetOrganisationSelection(false))" />
                                                    Select Existing Organization
                                                </label>
                                                <label class="radio-option">
                                                    <input type="radio" name="orgSelection" class="radio-input"
                                                           checked="@newUser.UseNewOrganisation"
                                                           @onchange="@(() => SetOrganisationSelection(true))" />
                                                    Create New Organization
                                                </label>
                                            </div>
                                            @if (newUser.UseNewOrganisation)
                                            {
                                                <div class="input-wrapper">
                                                    <InputText id="newOrganisation" @bind-Value="newUser.NewOrganisationName" class="modern-input" placeholder="Enter new organization name" />
                                                    <ValidationMessage For="@(() => newUser.NewOrganisationName)" class="validation-message" />
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="input-wrapper">
                                                    <InputSelect id="organisation" @bind-Value="newUser.OrganisationId" class="modern-input">
                                                        <option value="">Select Organization</option>
                                                        @foreach (var org in organisations)
                                                        {
                                                            <option value="@org.Id">@org.Name</option>
                                                        }
                                                    </InputSelect>
                                                </div>
                                            }
                                        </div>
                                    }

                                    <div class="form-group form-span-2">
                                        <label class="modern-label">Roles</label>
                                        <div class="form-check-group">
                                            @if (availableRolesForAssignment.Any())
                                            {
                                                <div class="checkbox-grid">
                                                    @foreach (var role in availableRolesForAssignment)
                                                    {
                                                        <div class="modern-checkbox">
                                                            <input type="checkbox" id="@($"userRole-{role.Name}")" class="checkbox-input"
                                                                   checked="@(newUser.SelectedRoles.Contains(role.Name ?? ""))"
                                                                   @onchange="@((e) => ToggleUserRoleSelection(role.Name ?? "", (bool)(e.Value ?? false)))" />
                                                            <label for="@($"userRole-{role.Name}")" class="checkbox-label">
                                                                <span class="checkbox-custom"></span>
                                                                <span>@role.Name</span>
                                                            </label>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <p class="text-muted small">No roles available</p>
                                            }
                                        </div>
                                    </div>
                                </div>

                                <div class="form-actions">
                                    <button type="submit" class="btn-modern btn-primary">
                                        <i class="fas fa-user-plus me-2"></i>
                                        Create User
                                    </button>
                                    <button type="button" class="btn-modern btn-secondary" @onclick="CancelForm">
                                        <i class="fas fa-times me-2"></i>
                                        Cancel
                                    </button>
                                </div>
                            </EditForm>
                        }
                        else if (isEditing)
                        {
                            <EditForm Model="@editUser" OnValidSubmit="UpdateUser">
                                <DataAnnotationsValidator />
                                <div class="modern-form-grid">
                                    <div class="form-group">
                                        <label for="editEmail" class="modern-label">Email</label>
                                        <div class="input-wrapper">
                                            <InputText id="editEmail" @bind-Value="editUser.Email" class="modern-input" placeholder="Enter email" />
                                            <ValidationMessage For="@(() => editUser.Email)" class="validation-message" />
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label for="editUsername" class="modern-label">Username</label>
                                        <div class="input-wrapper">
                                            <InputText id="editUsername" @bind-Value="editUser.UserName" class="modern-input" placeholder="Enter username" />
                                            <ValidationMessage For="@(() => editUser.UserName)" class="validation-message" />
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label for="editFirstname" class="modern-label">First Name</label>
                                        <div class="input-wrapper">
                                            <InputText id="editFirstname" @bind-Value="editUser.Firstname" class="modern-input" placeholder="Enter first name" />
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label for="editLastname" class="modern-label">Last Name</label>
                                        <div class="input-wrapper">
                                            <InputText id="editLastname" @bind-Value="editUser.Lastname" class="modern-input" placeholder="Enter last name" />
                                        </div>
                                    </div>

                                    @if (isDeveloper)
                                    {
                                        <div class="form-group form-span-2">
                                            <label for="editOrganisation" class="modern-label">Organization</label>
                                            <div class="input-wrapper">
                                                <InputSelect id="editOrganisation" @bind-Value="editUser.OrganisationId" class="modern-input">
                                                    <option value="">None</option>
                                                    @foreach (var org in organisations)
                                                    {
                                                        <option value="@org.Id">@org.Name</option>
                                                    }
                                                </InputSelect>
                                            </div>
                                        </div>
                                    }
                                </div>

                                <div class="form-actions">
                                    <button type="submit" class="btn-modern btn-primary">
                                        <i class="fas fa-save me-2"></i>
                                        Update User
                                    </button>
                                    <button type="button" class="btn-modern btn-secondary" @onclick="CancelForm">
                                        <i class="fas fa-times me-2"></i>
                                        Cancel
                                    </button>
                                </div>
                            </EditForm>
                        }
                        else if (isCreatingRole)
                        {
                            <EditForm Model="@newRole" OnValidSubmit="CreateRole">
                                <DataAnnotationsValidator />
                                <div class="form-group">
                                    <label for="roleName" class="modern-label">Role Name</label>
                                    <div class="input-wrapper">
                                        <InputText id="roleName" @bind-Value="newRole.Name" class="modern-input" placeholder="Enter role name" />
                                        <ValidationMessage For="@(() => newRole.Name)" class="validation-message" />
                                    </div>
                                </div>

                                <div class="form-actions">
                                    <button type="submit" class="btn-modern btn-primary">
                                        <i class="fas fa-plus me-2"></i>
                                        Create Role
                                    </button>
                                    <button type="button" class="btn-modern btn-secondary" @onclick="CancelForm">
                                        <i class="fas fa-times me-2"></i>
                                        Cancel
                                    </button>
                                </div>
                            </EditForm>
                        }
                        else if (isEditingRole)
                        {
                            <EditForm Model="@editRole" OnValidSubmit="UpdateRole">
                                <DataAnnotationsValidator />
                                <div class="form-group">
                                    <label for="editRoleName" class="modern-label">Role Name</label>
                                    <div class="input-wrapper">
                                        <InputText id="editRoleName" @bind-Value="editRole.Name" class="modern-input" placeholder="Enter role name" />
                                        <ValidationMessage For="@(() => editRole.Name)" class="validation-message" />
                                    </div>
                                </div>

                                <div class="form-actions">
                                    <button type="submit" class="btn-modern btn-primary">
                                        <i class="fas fa-save me-2"></i>
                                        Update Role
                                    </button>
                                    <button type="button" class="btn-modern btn-secondary" @onclick="CancelForm">
                                        <i class="fas fa-times me-2"></i>
                                        Cancel
                                    </button>
                                </div>
                            </EditForm>
                        }
                        else if (isManagingRoles && selectedUser != null)
                        {
                            <div class="form-group">
                                <label class="modern-label mb-3">Manage Roles for @selectedUser.Email</label>
                                <div class="form-check-group">
                                    <div class="checkbox-grid">
                                        @foreach (var role in availableRolesForAssignment)
                                        {
                                            <div class="modern-checkbox">
                                                <input type="checkbox" id="@($"role-{role.Name}")" class="checkbox-input"
                                                       checked="@(userRoles?.Contains(role.Name ?? "") ?? false)"
                                                       @onchange="@((e) => ToggleUserRole(role.Name ?? "", (bool)(e.Value ?? false)))" />
                                                <label for="@($"role-{role.Name}")" class="checkbox-label">
                                                    <span class="checkbox-custom"></span>
                                                    @role.Name
                                                    <span class="role-badge system-role">System</span>
                                                </label>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <div class="form-actions">
                                <button type="button" class="btn-modern btn-primary" @onclick="CancelForm">
                                    <i class="fas fa-check me-2"></i>
                                    Done
                                </button>
                            </div>
                        }
                        else if (isViewingRoles)
                        {
                            @if (visibleRoles.Any())
                            {
                                <div class="table-responsive">
                                    <table class="table table-sm">
                                        <thead>
                                            <tr>
                                                <th class="modern-label">Role Name</th>
                                                <th class="modern-label">Organization</th>
                                                <th class="modern-label text-end">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var role in visibleRoles)
                                            {
                                                <tr>
                                                    <td>@role.Name</td>
                                                    <td>
                                                        <span class="role-badge system-role">System</span>
                                                    </td>
                                                    <td class="text-end">
                                                        <div class="btn-group action-buttons">
                                                            @if (CanEditRole(role))
                                                            {
                                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => StartEditRole(role)">
                                                                    <i class="fas fa-edit"></i>
                                                                </button>
                                                            }
                                                            @if (CanDeleteRole(role))
                                                            {
                                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteRole(role.Id)">
                                                                    <i class="fas fa-trash"></i>
                                                                </button>
                                                            }
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <p class="text-muted text-center">No roles available</p>
                            }

                            <div class="form-actions">
                                <button type="button" class="btn-modern btn-primary" @onclick="CancelForm">
                                    <i class="fas fa-check me-2"></i>
                                    Close
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        <!-- Users List -->
        <div class="@(showForm ? "col-lg-8 order-2" : "col-12")">
            <div class="card my-4">
                <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                    <div class="bg-gradient-dark shadow-dark border-radius-lg pt-4 pb-3">
                        <h6 class="text-white text-capitalize ps-3">Users Management</h6>
                        <div class="ps-3 pb-2 d-flex align-items-center header-buttons">
                            <button class="btn btn-sm btn-outline-light" @onclick="LoadUsers">
                                <i class="fas fa-sync-alt me-1"></i> Refresh
                            </button>
                            @if (CanCreateUser)
                            {
                                <button class="btn btn-sm btn-outline-light" @onclick="ShowCreateUserForm">
                                    <i class="fas fa-user-plus me-1"></i> Add User
                                </button>
                            }
                            @if (CanCreateRole)
                            {
                                <button class="btn btn-sm btn-outline-light" @onclick="ShowCreateRoleForm">
                                    <i class="fas fa-plus-circle me-1"></i> Add Role
                                </button>
                            }
                            <button class="btn btn-sm btn-outline-light" @onclick="ShowRolesListForm">
                                <i class="fas fa-list me-1"></i> Manage Roles
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body px-0 pb-2">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mx-3" role="alert">
                            @errorMessage
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success mx-3" role="alert">
                            @successMessage
                        </div>
                    }
                    @if (isLoading)
                    {
                        <div class="text-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (users.Any())
                    {
                        <div class="table-responsive p-0">
                            <table class="table align-items-center mb-0">
                                <thead>
                                    <tr>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">User</th>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Roles</th>
                                        <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Organization</th>
                                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Status</th>
                                        <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Last Lockout</th>
                                        <th class="text-secondary opacity-7">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var userInfo in users)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex px-2 py-1">
                                                    <div>
                                                        <div class="avatar avatar-sm me-3 border-radius-lg bg-gradient-@(GetAvatarColor(userInfo.User.Email)) d-flex align-items-center justify-content-center">
                                                            <span class="text-white text-xs font-weight-bold">
                                                                @GetUserInitials(userInfo.User.Email, userInfo.User.UserName)
                                                            </span>
                                                        </div>
                                                    </div>
                                                    <div class="d-flex flex-column justify-content-center">
                                                        <h6 class="mb-0 text-sm">@(userInfo.User.UserName ?? "Unknown")</h6>
                                                        <p class="text-xs text-secondary mb-0">@userInfo.User.Email</p>
                                                        @if (!string.IsNullOrEmpty(userInfo.User.Firstname) || !string.IsNullOrEmpty(userInfo.User.Lastname))
                                                        {
                                                            <p class="text-xs text-secondary mb-0">
                                                                @userInfo.User.Firstname @userInfo.User.Lastname
                                                            </p>
                                                        }
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                @if (userInfo.Roles.Any())
                                                {
                                                    <p class="text-xs font-weight-bold mb-0">
                                                        @foreach (var role in userInfo.Roles.Take(3))
                                                        {
                                                            <span class="role-badge system-role">
                                                                @role
                                                            </span>
                                                        }
                                                    </p>
                                                    @if (userInfo.Roles.Count > 3)
                                                    {
                                                        <p class="text-xs text-secondary mb-0">+@(userInfo.Roles.Count - 3) more</p>
                                                    }
                                                }
                                                else
                                                {
                                                    <p class="text-xs text-secondary mb-0">No roles assigned</p>
                                                }
                                            </td>
                                            <td>
                                                <p class="text-xs text-secondary mb-0">@(userInfo.User.Organisation?.Name ?? "None")</p>
                                            </td>
                                            <td class="align-middle text-center text-sm">
                                                @if (userInfo.User.EmailConfirmed)
                                                {
                                                    <span class="badge badge-sm bg-gradient-success">Verified</span>
                                                }
                                                else
                                                {
                                                    <span class="badge badge-sm bg-gradient-warning">Pending</span>
                                                }
                                                @if (userInfo.User.LockoutEnd.HasValue && userInfo.User.LockoutEnd > DateTimeOffset.UtcNow)
                                                {
                                                    <span class="badge badge-sm bg-gradient-danger ms-1">Locked</span>
                                                }
                                            </td>
                                            <td class="align-middle text-center">
                                                <span class="text-secondary text-xs font-weight-bold">
                                                    @(userInfo.User.LockoutEnd.HasValue? userInfo.User.LockoutEnd.Value.ToString("dd/MM/yy") : "Never")
                                                </span>
                                            </td>
                                            <td class="align-middle">
                                                <div class="btn-group action-buttons">
                                                    @if (CanEditUser(userInfo.User))
                                                    {
                                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => EditUser(userInfo.User.Id)">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                    }
                                                    @if (CanManageRoles(userInfo.User))
                                                    {
                                                        <button class="btn btn-sm btn-outline-info" @onclick="() => ManageRoles(userInfo.User.Id)">
                                                            <i class="fas fa-user-tag"></i>
                                                        </button>
                                                    }
                                                    @if (CanLockUser(userInfo.User))
                                                    {
                                                        @if (userInfo.User.LockoutEnd.HasValue && userInfo.User.LockoutEnd > DateTimeOffset.UtcNow)
                                                        {
                                                            <button class="btn btn-sm btn-outline-success" @onclick="() => UnlockUser(userInfo.User.Id)">
                                                                <i class="fas fa-unlock"></i>
                                                            </button>
                                                        }
                                                        else
                                                        {
                                                            <button class="btn btn-sm btn-outline-warning" @onclick="() => LockUser(userInfo.User.Id)">
                                                                <i class="fas fa-lock"></i>
                                                            </button>
                                                        }
                                                    }
                                                    @if (CanDeleteUser(userInfo.User))
                                                    {
                                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteUser(userInfo.User.Id)">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center p-4">
                            <p class="text-muted">No users found.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Fields - State Variables
    private List<UserInfo> users = new();
    private List<Organisation> organisations = new();
    private bool isLoading = true;
    private string? errorMessage = null;
    private string? successMessage = null;

    // Form State
    private bool showForm = false;
    private bool isEditing = false;
    private bool isCreatingUser = false;
    private bool isCreatingRole = false;
    private bool isEditingRole = false;
    private bool isManagingRoles = false;
    private bool isViewingRoles = false;

    // Data Collections
    private List<IdentityRole> allRoles = new();
    private List<IdentityRole> visibleRoles = new();
    private List<IdentityRole> availableRolesForAssignment = new();
    private List<string> userRoles = new();

    // User and Authentication
    private ApplicationUser? selectedUser = null;
    private ApplicationUser? currentUser = null;
    private ClaimsPrincipal? currentClaimsPrincipal = null;

    // Model Instances
    private NewUserModel newUser = new();
    private NewRoleModel newRole = new();
    private EditUserModel editUser = new();
    private EditRoleModel editRole = new();

    // Role Check Fields
    private bool isDeveloper = false;
    private bool isCouncilAdmin = false;
    private bool isAdmin = false;

    // Permission Properties
    private bool CanCreateUser => isDeveloper || isCouncilAdmin || isAdmin;
    private bool CanCreateRole => isDeveloper || isCouncilAdmin || isAdmin;

    // Model Classes
    public class UserInfo
    {
        public ApplicationUser User { get; set; } = null!;
        public List<string> Roles { get; set; } = new();
    }

    public class NewUserModel
    {
        public string Email { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string? Firstname { get; set; }
        public string? Lastname { get; set; }
        public string? Othernames { get; set; }
        public Guid? OrganisationId { get; set; }
        public string NewOrganisationName { get; set; } = string.Empty;
        public bool UseNewOrganisation { get; set; } = false;
        public string Password { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
        public List<string> SelectedRoles { get; set; } = new();
    }

    public class NewRoleModel
    {
        public string Name { get; set; } = string.Empty;
    }

    public class EditUserModel
    {
        public string Id { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string? Firstname { get; set; }
        public string? Lastname { get; set; }
        public string? Othernames { get; set; }
        public Guid? OrganisationId { get; set; }
    }

    public class EditRoleModel
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
    }

    // Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            currentClaimsPrincipal = authState.User;

            if (currentClaimsPrincipal?.Identity?.IsAuthenticated == true)
            {
                currentUser = await UserManager.GetUserAsync(currentClaimsPrincipal);

                if (currentUser != null)
                {
                    isDeveloper = await UserManager.IsInRoleAsync(currentUser, "developer");
                    isCouncilAdmin = await UserManager.IsInRoleAsync(currentUser, "CouncilAdmin");
                    isAdmin = await UserManager.IsInRoleAsync(currentUser, "admin");
                }
            }

            await LoadUsers();
            await LoadAllRoles();
            await LoadAllOrganisations();
        }
        catch (Exception ex)
        {
            SetErrorMessage($"Error initializing component: {ex.Message}");
        }
    }

    // Helper Methods
    private void SetErrorMessage(string message)
    {
        errorMessage = message;
        successMessage = null;
        InvokeAsync(StateHasChanged);
    }

    private void SetSuccessMessage(string message)
    {
        successMessage = message;
        errorMessage = null;
        InvokeAsync(StateHasChanged);
    }

    private void ClearMessages()
    {
        errorMessage = null;
        successMessage = null;
    }

    private string GetUserInitials(string? email, string? userName)
    {
        var name = !string.IsNullOrEmpty(userName) ? userName : email ?? "U";
        if (name.Contains('@'))
        {
            name = name.Split('@')[0];
        }

        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
        {
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        }
        return name.Length >= 2 ? name.Substring(0, 2).ToUpper() : name.ToUpper();
    }

    private string GetAvatarColor(string? email)
    {
        if (string.IsNullOrEmpty(email)) return "primary";

        var colors = new[] { "primary", "secondary", "success", "info", "warning", "danger" };
        var hash = email.GetHashCode();
        var index = Math.Abs(hash) % colors.Length;
        return colors[index];
    }

    // Permission Check Methods
    private bool CanEditUser(ApplicationUser user)
    {
        if (isDeveloper) return true;
        if (currentUser == null) return false;
        return user.OrganisationId == currentUser.OrganisationId;
    }

    private bool CanManageRoles(ApplicationUser user)
    {
        if (isDeveloper) return true;
        if (currentUser == null) return false;
        return user.OrganisationId == currentUser.OrganisationId;
    }

    private bool CanLockUser(ApplicationUser user)
    {
        if (isDeveloper) return true;
        if (currentUser == null) return false;
        return user.OrganisationId == currentUser.OrganisationId && user.Id != currentUser.Id;
    }

    private bool CanDeleteUser(ApplicationUser user)
    {
        if (isDeveloper) return true;
        if (currentUser == null) return false;
        return user.OrganisationId == currentUser.OrganisationId && user.Id != currentUser.Id;
    }

    private bool CanEditRole(IdentityRole role)
    {
        if (isDeveloper) return true;
        if (currentUser == null) return false;
        return true;
    }

    private bool CanDeleteRole(IdentityRole role)
    {
        if (isDeveloper) return true;
        if (currentUser == null) return false;
        var protectedRoles = new[] { "developer", "counciladmin", "admin" };
        return !protectedRoles.Contains(role.Name?.ToLower());
    }

    // Data Loading Methods
    private async Task LoadUsers()
    {
        isLoading = true;
        users.Clear();
        ClearMessages();
        await InvokeAsync(StateHasChanged);

        try
        {
            using var context = DbContextFactory.CreateDbContext();
            var query = context.Users.Include(u => u.Organisation).AsQueryable();

            if (!isDeveloper && currentUser?.OrganisationId != null)
            {
                query = query.Where(u => u.OrganisationId == currentUser.OrganisationId);
            }

            var allUsers = await query.ToListAsync();

            foreach (var user in allUsers)
            {
                var roles = await UserManager.GetRolesAsync(user);
                users.Add(new UserInfo
                {
                    User = user,
                    Roles = roles.ToList()
                });
            }
        }
        catch (Exception ex)
        {
            SetErrorMessage($"Error loading users: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadAllRoles()
    {
        try
        {
            allRoles = await RoleManager.Roles.ToListAsync();
            visibleRoles = allRoles.ToList();
            availableRolesForAssignment = allRoles.ToList();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            SetErrorMessage($"Error loading roles: {ex.Message}");
        }
    }

    private async Task LoadAllOrganisations()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            organisations = await context.Organisations.ToListAsync();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            SetErrorMessage($"Error loading organisations: {ex.Message}");
        }
    }

    // Form Management Methods
    private void ShowCreateUserForm()
    {
        newUser = new NewUserModel
        {
            OrganisationId = currentUser?.OrganisationId
        };
        // For non-developers, automatically set the organization to current user's org
        if (!isDeveloper && currentUser?.OrganisationId != null)
        {
            newUser.OrganisationId = currentUser.OrganisationId;
            newUser.UseNewOrganisation = false;
        }
        isCreatingUser = true;
        isEditing = false;
        isCreatingRole = false;
        isEditingRole = false;
        isManagingRoles = false;
        isViewingRoles = false;
        showForm = true;
        ClearMessages();
        StateHasChanged();
    }

    private void ShowCreateRoleForm()
    {
        newRole = new NewRoleModel();
        isCreatingRole = true;
        isCreatingUser = false;
        isEditing = false;
        isEditingRole = false;
        isManagingRoles = false;
        isViewingRoles = false;
        showForm = true;
        ClearMessages();
        StateHasChanged();
    }

    private void ShowRolesListForm()
    {
        isViewingRoles = true;
        isCreatingUser = false;
        isEditing = false;
        isCreatingRole = false;
        isEditingRole = false;
        isManagingRoles = false;
        showForm = true;
        ClearMessages();
        StateHasChanged();
    }

    private void CancelForm()
    {
        showForm = false;
        isEditing = false;
        isCreatingUser = false;
        isCreatingRole = false;
        isEditingRole = false;
        isManagingRoles = false;
        isViewingRoles = false;
        newUser = new NewUserModel();
        newRole = new NewRoleModel();
        editUser = new EditUserModel();
        editRole = new EditRoleModel();
        selectedUser = null;
        userRoles = new List<string>();
        ClearMessages();
        StateHasChanged();
    }

    // User Management Methods
    private async Task CreateUser()
    {
        try
        {
            ClearMessages();

            if (newUser.Password != newUser.ConfirmPassword)
            {
                SetErrorMessage("Passwords do not match.");
                return;
            }

            Guid? organisationId = newUser.OrganisationId;
            if (newUser.UseNewOrganisation && !string.IsNullOrWhiteSpace(newUser.NewOrganisationName))
            {
                using var context = DbContextFactory.CreateDbContext();
                var newOrg = new Organisation
                {
                    Id = Guid.NewGuid(),
                    Name = newUser.NewOrganisationName.Trim()
                };
                context.Organisations.Add(newOrg);
                await context.SaveChangesAsync();
                organisationId = newOrg.Id;
                await LoadAllOrganisations();
            }

            var user = new ApplicationUser
            {
                UserName = newUser.UserName,
                Email = newUser.Email,
                Firstname = newUser.Firstname,
                Lastname = newUser.Lastname,
                Othernames = newUser.Othernames,
                OrganisationId = organisationId,
                EmailConfirmed = true
            };

            var result = await UserManager.CreateAsync(user, newUser.Password);
            if (result.Succeeded)
            {
                foreach (var role in newUser.SelectedRoles)
                {
                    await UserManager.AddToRoleAsync(user, role);
                }

                await LoadUsers();
                CancelForm();
                SetSuccessMessage($"User '{newUser.UserName}' created successfully.");
            }
            else
            {
                SetErrorMessage($"Error creating user: {string.Join(", ", result.Errors.Select(e => e.Description))}");
            }
        }
        catch (Exception ex)
        {
            SetErrorMessage($"Error creating user: {ex.Message}");
        }
    }

    private async Task EditUser(string userId)
    {
        try
        {
            ClearMessages();
            var user = await UserManager.FindByIdAsync(userId);
            if (user != null)
            {
                editUser = new EditUserModel
                {
                    Id = user.Id,
                    Email = user.Email ?? "",
                    UserName = user.UserName ?? "",
                    Firstname = user.Firstname,
                    Lastname = user.Lastname,
                    Othernames = user.Othernames,
                    OrganisationId = user.OrganisationId
                };
                isEditing = true;
                isCreatingUser = false;
                isCreatingRole = false;
                isEditingRole = false;
                isManagingRoles = false;
                isViewingRoles = false;
                showForm = true;
                StateHasChanged();
            }
            else
            {
                SetErrorMessage("User not found.");
            }
        }
        catch (Exception ex)
        {
            SetErrorMessage($"Error loading user for edit: {ex.Message}");
        }
    }

    private async Task UpdateUser()
    {
        try
        {
            ClearMessages();
            var user = await UserManager.FindByIdAsync(editUser.Id);
            if (user != null)
            {
                user.Email = editUser.Email;
                user.UserName = editUser.UserName;
                user.Firstname = editUser.Firstname;
                user.Lastname = editUser.Lastname;
                user.Othernames = editUser.Othernames;
                user.OrganisationId = editUser.OrganisationId;

                var result = await UserManager.UpdateAsync(user);
                if (result.Succeeded)
                {
                    await LoadUsers();
                    CancelForm();
                    SetSuccessMessage($"User '{editUser.UserName}' updated successfully.");
                }
                else
                {
                    SetErrorMessage($"Error updating user: {string.Join(", ", result.Errors.Select(e => e.Description))}");
                }
            }
            else
            {
                SetErrorMessage("User not found.");
            }
        }
        catch (Exception ex)
        {
            SetErrorMessage($"Error updating user: {ex.Message}");
        }
    }

    private async Task LockUser(string userId)
    {
        try
        {
            ClearMessages();
            var user = await UserManager.FindByIdAsync(userId);
            if (user != null)
            {
                if (!CanLockUser(user))
                {
                    SetErrorMessage("You cannot lock this user.");
                    return;
                }

                var result = await UserManager.SetLockoutEndDateAsync(user, DateTimeOffset.UtcNow.AddYears(100));
                if (result.Succeeded)
                {
                    await LoadUsers();
                    SetSuccessMessage($"User '{user.UserName}' has been locked.");
                }
                else
                {
                    SetErrorMessage($"Error locking user: {string.Join(", ", result.Errors.Select(e => e.Description))}");
                }
            }
            else
            {
                SetErrorMessage("User not found.");
            }
        }
        catch (Exception ex)
        {
            SetErrorMessage($"Error locking user: {ex.Message}");
        }
    }

    private async Task UnlockUser(string userId)
    {
        try
        {
            ClearMessages();
            var user = await UserManager.FindByIdAsync(userId);
            if (user != null)
            {
                var result = await UserManager.SetLockoutEndDateAsync(user, null);
                if (result.Succeeded)
                {
                    await LoadUsers();
                    SetSuccessMessage($"User '{user.UserName}' has been unlocked.");
                }
                else
                {
                    SetErrorMessage($"Error unlocking user: {string.Join(", ", result.Errors.Select(e => e.Description))}");
                }
            }
            else
            {
                SetErrorMessage("User not found.");
            }
        }
        catch (Exception ex)
        {
            SetErrorMessage($"Error unlocking user: {ex.Message}");
        }
    }

    private async Task DeleteUser(string userId)
    {
        try
        {
            ClearMessages();
            var user = await UserManager.FindByIdAsync(userId);
            if (user != null)
            {
                if (!CanDeleteUser(user))
                {
                    SetErrorMessage("You cannot delete this user.");
                    return;
                }

                var result = await UserManager.DeleteAsync(user);
                if (result.Succeeded)
                {
                    await LoadUsers();
                    SetSuccessMessage($"User '{user.UserName}' has been deleted.");
                }
                else
                {
                    SetErrorMessage($"Error deleting user: {string.Join(", ", result.Errors.Select(e => e.Description))}");
                }
            }
            else
            {
                SetErrorMessage("User not found.");
            }
        }
        catch (Exception ex)
        {
            SetErrorMessage($"Error deleting user: {ex.Message}");
        }
    }

    // Role Management Methods
    private async Task CreateRole()
    {
        try
        {
            ClearMessages();

            if (string.IsNullOrWhiteSpace(newRole.Name))
            {
                SetErrorMessage("Role name is required.");
                return;
            }

            var roleExists = await RoleManager.RoleExistsAsync(newRole.Name);
            if (roleExists)
            {
                SetErrorMessage("Role already exists.");
                return;
            }

            var role = new IdentityRole(newRole.Name.Trim());
            var result = await RoleManager.CreateAsync(role);
            if (result.Succeeded)
            {
                await LoadAllRoles();
                CancelForm();
                SetSuccessMessage($"Role '{newRole.Name}' created successfully.");
            }
            else
            {
                SetErrorMessage($"Error creating role: {string.Join(", ", result.Errors.Select(e => e.Description))}");
            }
        }
        catch (Exception ex)
        {
            SetErrorMessage($"Error creating role: {ex.Message}");
        }
    }

    private void StartEditRole(IdentityRole role)
    {
        editRole = new EditRoleModel
        {
            Id = role.Id,
            Name = role.Name ?? ""
        };
        isEditingRole = true;
        isCreatingUser = false;
        isEditing = false;
        isCreatingRole = false;
        isManagingRoles = false;
        isViewingRoles = false;
        showForm = true;
        ClearMessages();
        StateHasChanged();
    }

    private async Task UpdateRole()
    {
        try
        {
            ClearMessages();
            var role = await RoleManager.FindByIdAsync(editRole.Id);
            if (role != null)
            {
                role.Name = editRole.Name;
                var result = await RoleManager.UpdateAsync(role);
                if (result.Succeeded)
                {
                    await LoadAllRoles();
                    CancelForm();
                    SetSuccessMessage($"Role updated successfully.");
                }
                else
                {
                    SetErrorMessage($"Error updating role: {string.Join(", ", result.Errors.Select(e => e.Description))}");
                }
            }
            else
            {
                SetErrorMessage("Role not found.");
            }
        }
        catch (Exception ex)
        {
            SetErrorMessage($"Error updating role: {ex.Message}");
        }
    }

    private async Task DeleteRole(string roleId)
    {
        try
        {
            ClearMessages();
            var role = await RoleManager.FindByIdAsync(roleId);
            if (role != null)
            {
                if (!CanDeleteRole(role))
                {
                    SetErrorMessage("This role cannot be deleted as it is a protected system role.");
                    return;
                }

                var result = await RoleManager.DeleteAsync(role);
                if (result.Succeeded)
                {
                    await LoadAllRoles();
                    SetSuccessMessage($"Role '{role.Name}' deleted successfully.");
                }
                else
                {
                    SetErrorMessage($"Error deleting role: {string.Join(", ", result.Errors.Select(e => e.Description))}");
                }
            }
            else
            {
                SetErrorMessage("Role not found.");
            }
        }
        catch (Exception ex)
        {
            SetErrorMessage($"Error deleting role: {ex.Message}");
        }
    }

    // User-Role Management Methods
    private async Task ManageRoles(string userId)
    {
        try
        {
            ClearMessages();
            selectedUser = await UserManager.FindByIdAsync(userId);
            if (selectedUser != null)
            {
                userRoles = (await UserManager.GetRolesAsync(selectedUser)).ToList();
                isManagingRoles = true;
                isCreatingUser = false;
                isEditing = false;
                isCreatingRole = false;
                isEditingRole = false;
                isViewingRoles = false;
                showForm = true;
                StateHasChanged();
            }
            else
            {
                SetErrorMessage("User not found.");
            }
        }
        catch (Exception ex)
        {
            SetErrorMessage($"Error loading user roles: {ex.Message}");
        }
    }

    private async Task ToggleUserRole(string roleName, bool isChecked)
    {
        if (selectedUser == null) return;

        try
        {
            if (isChecked)
            {
                if (!userRoles.Contains(roleName))
                {
                    var result = await UserManager.AddToRoleAsync(selectedUser, roleName);
                    if (result.Succeeded)
                    {
                        userRoles.Add(roleName);
                        SetSuccessMessage($"Role '{roleName}' added to user.");
                    }
                    else
                    {
                        SetErrorMessage($"Error adding role: {string.Join(", ", result.Errors.Select(e => e.Description))}");
                    }
                }
            }
            else
            {
                if (userRoles.Contains(roleName))
                {
                    var result = await UserManager.RemoveFromRoleAsync(selectedUser, roleName);
                    if (result.Succeeded)
                    {
                        userRoles.Remove(roleName);
                        SetSuccessMessage($"Role '{roleName}' removed from user.");
                    }
                    else
                    {
                        SetErrorMessage($"Error removing role: {string.Join(", ", result.Errors.Select(e => e.Description))}");
                    }
                }
            }
            await LoadUsers();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            SetErrorMessage($"Error toggling role: {ex.Message}");
        }
    }

    private void ToggleUserRoleSelection(string roleName, bool isChecked)
    {
        if (isChecked)
        {
            if (!newUser.SelectedRoles.Contains(roleName))
            {
                newUser.SelectedRoles.Add(roleName);
            }
        }
        else
        {
            newUser.SelectedRoles.Remove(roleName);
        }
        StateHasChanged();
    }

    // Organization Management Methods
    private void SetOrganisationSelection(bool useNew)
    {
        newUser.UseNewOrganisation = useNew;
        StateHasChanged();
    }
}