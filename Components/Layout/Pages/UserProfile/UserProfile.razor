@page "/user-profile"
@using LocalGov360.Data
@using LocalGov360.Data.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@attribute [Authorize]

<style>
    :root {
        --primary-bg: #ffffff;
        --secondary-bg: #f8f9fa;
        --text-dark: #212529;
        --text-muted: #6c757d;
        --border-color: #dee2e6;
        --shadow-color: rgba(0, 0, 0, 0.1);
        --avatar-size: 120px;
        --transition-speed: 0.3s;
    }

    .profile-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 0 1rem;
    }

    .profile-card {
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
        border: none;
    }

    .profile-header {
        background: linear-gradient(135deg, #000000 0%, #333333 100%);
        color: white;
        padding: 1.5rem;
        position: relative;
    }

        .profile-header h6 {
            font-weight: 600;
            letter-spacing: 0.5px;
            margin: 0;
        }

    .profile-body {
        padding: 2rem;
        background-color: var(--primary-bg);
    }

    .avatar-container {
        display: flex;
        justify-content: center;
        margin-bottom: 1.5rem;
    }

    .avatar {
        width: var(--avatar-size);
        height: var(--avatar-size);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2.5rem;
        font-weight: 600;
        color: white;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        transition: transform 0.3s ease;
    }

        .avatar:hover {
            transform: scale(1.05);
        }

    .user-name {
        font-size: 1.75rem;
        font-weight: 600;
        color: var(--text-dark);
        margin-bottom: 0.25rem;
        text-align: center;
    }

    .user-email {
        color: var(--text-muted);
        text-align: center;
        margin-bottom: 2rem;
        font-size: 1rem;
    }

    .form-section {
        margin-bottom: 2.5rem;
    }

    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--text-dark);
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid var(--border-color);
    }

    .form-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    .form-group {
        margin-bottom: 1.25rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: var(--text-dark);
    }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        font-size: 0.95rem;
        line-height: 1.5;
        color: var(--text-dark);
        background-color: var(--primary-bg);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        transition: border-color var(--transition-speed), box-shadow var(--transition-speed);
    }

        .form-control:focus {
            border-color: #000;
            box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);
            outline: none;
        }

    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 0.75rem 1.5rem;
        font-size: 0.95rem;
        font-weight: 500;
        line-height: 1.5;
        border-radius: 8px;
        cursor: pointer;
        transition: all var(--transition-speed);
        border: none;
    }

    .btn-dark {
        background-color: #000;
        color: white;
    }

        .btn-dark:hover {
            background-color: #333;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

    .btn-block {
        display: block;
        width: 100%;
    }

    .alert {
        padding: 1rem 1.5rem;
        margin-bottom: 1.5rem;
        border-radius: 8px;
        font-size: 0.95rem;
    }

    .alert-danger {
        background-color: #f8f9fa;
        border: 1px solid #000;
        color: var(--text-dark);
    }

    .btn-close {
        background: transparent url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23000'%3e%3cpath d='M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707A1 1 0 01.293.293z'/%3e%3c/svg%3e") center/1em auto no-repeat;
        opacity: 0.7;
        transition: opacity var(--transition-speed);
    }

        .btn-close:hover {
            opacity: 1;
        }

    .spinner-container {
        display: flex;
        justify-content: center;
        padding: 3rem 0;
    }

    .spinner-border {
        width: 3rem;
        height: 3rem;
        border-width: 0.3em;
    }

    .avatar-dark {
        background: linear-gradient(135deg, #000000 0%, #333333 100%);
    }

    .avatar-success {
        background: linear-gradient(135deg, #666666 0%, #999999 100%);
    }

    .avatar-warning {
        background: linear-gradient(135deg, #555555 0%, #888888 100%);
    }

    .avatar-secondary {
        background: linear-gradient(135deg, #777777 0%, #aaaaaa 100%);
    }
</style>

<div class="profile-container">
    <div class="profile-card">
        <div class="profile-header">
            <h6>User Profile</h6>
        </div>

        <div class="profile-body">
            @if (isLoading)
            {
                <div class="spinner-container">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (currentUser != null)
            {
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        @errorMessage
                        <button type="button" class="btn-close" @onclick="() => errorMessage = null" aria-label="Close"></button>
                    </div>
                }

                <div class="avatar-container">
                    <div class="avatar avatar-@(GetAvatarColor(currentUser.Email))">
                        @GetUserInitials(currentUser.Email, currentUser.UserName)
                    </div>
                </div>

                <h3 class="user-name">@currentUser.UserName</h3>
                <p class="user-email">@currentUser.Email</p>

                <div class="form-section">
                    <h5 class="section-title">Profile Information</h5>
                    <EditForm Model="@editUser" OnValidSubmit="UpdateProfile">
                        <DataAnnotationsValidator />
                        <div class="form-grid">
                            <div class="form-group">
                                <label class="form-label">Email</label>
                                <InputText class="form-control" @bind-Value="editUser.Email" />
                                <ValidationMessage For="@(() => editUser.Email)" />
                            </div>

                            <div class="form-group">
                                <label class="form-label">Username</label>
                                <InputText class="form-control" @bind-Value="editUser.UserName" />
                                <ValidationMessage For="@(() => editUser.UserName)" />
                            </div>

                            <div class="form-group">
                                <label class="form-label">First Name</label>
                                <InputText class="form-control" @bind-Value="editUser.Firstname" />
                            </div>

                            <div class="form-group">
                                <label class="form-label">Last Name</label>
                                <InputText class="form-control" @bind-Value="editUser.Lastname" />
                            </div>

                            <div class="form-group" style="grid-column: span 2;">
                                <label class="form-label">Phone Number</label>
                                <InputText class="form-control" @bind-Value="editUser.PhoneNumber" />
                            </div>
                        </div>

                        <button type="submit" class="btn btn-dark btn-block mt-3">Save Changes</button>
                    </EditForm>
                </div>

                <div class="form-section">
                    <h5 class="section-title">Change Password</h5>
                    <EditForm Model="@passwordModel" OnValidSubmit="ChangePassword">
                        <DataAnnotationsValidator />
                        <div class="form-grid">
                            <div class="form-group">
                                <label class="form-label">Current Password</label>
                                <InputText type="password" class="form-control" @bind-Value="passwordModel.CurrentPassword" />
                                <ValidationMessage For="@(() => passwordModel.CurrentPassword)" />
                            </div>

                            <div class="form-group">
                                <label class="form-label">New Password</label>
                                <InputText type="password" class="form-control" @bind-Value="passwordModel.NewPassword" />
                                <ValidationMessage For="@(() => passwordModel.NewPassword)" />
                            </div>

                            <div class="form-group">
                                <label class="form-label">Confirm New Password</label>
                                <InputText type="password" class="form-control" @bind-Value="passwordModel.ConfirmPassword" />
                                <ValidationMessage For="@(() => passwordModel.ConfirmPassword)" />
                            </div>
                        </div>

                        <button type="submit" class="btn btn-dark btn-block mt-3">Change Password</button>
                    </EditForm>
                </div>
            }
            else
            {
                <div class="alert alert-danger">User not found</div>
            }
        </div>
    </div>
</div>

@code {
    private ApplicationUser? currentUser;
    private bool isLoading = true;
    private string? errorMessage;
    private EditUserModel editUser = new();
    private PasswordChangeModel passwordModel = new();

    public class EditUserModel
    {
        public string Id { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string? Firstname { get; set; }
        public string? Lastname { get; set; }
        public string? PhoneNumber { get; set; }
    }

    public class PasswordChangeModel
    {
        public string CurrentPassword { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            currentUser = await UserManager.GetUserAsync(user);
            if (currentUser != null)
            {
                editUser = new EditUserModel
                {
                    Id = currentUser.Id,
                    Email = currentUser.Email ?? "",
                    UserName = currentUser.UserName ?? "",
                    Firstname = currentUser.Firstname,
                    Lastname = currentUser.Lastname,
                    PhoneNumber = currentUser.PhoneNumber
                };
            }
        }
        isLoading = false;
        StateHasChanged();
    }

    private string GetUserInitials(string? email, string? userName)
    {
        var name = !string.IsNullOrEmpty(userName) ? userName : email ?? "U";
        if (name.Contains('@'))
        {
            name = name.Split('@')[0];
        }
        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
        {
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        }
        return name.Length >= 2 ? name.Substring(0, 2).ToUpper() : name.ToUpper();
    }

    private string GetAvatarColor(string? email)
    {
        if (string.IsNullOrEmpty(email)) return "dark";
        var colors = new[] { "dark", "success", "warning", "secondary" };
        var hash = email.GetHashCode();
        var index = Math.Abs(hash) % colors.Length;
        return colors[index];
    }

    private async Task UpdateProfile()
    {
        if (currentUser == null) return;
        try
        {
            currentUser.Email = editUser.Email;
            currentUser.UserName = editUser.UserName;
            currentUser.Firstname = editUser.Firstname;
            currentUser.Lastname = editUser.Lastname;
            currentUser.PhoneNumber = editUser.PhoneNumber;
            var result = await UserManager.UpdateAsync(currentUser);
            if (result.Succeeded)
            {
                errorMessage = null;
                // Optionally show success toast/notification here
            }
            else
            {
                errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while updating the profile.";
        }
        StateHasChanged();
    }

    private async Task ChangePassword()
    {
        if (currentUser == null) return;
        try
        {
            if (passwordModel.NewPassword != passwordModel.ConfirmPassword)
            {
                errorMessage = "New password and confirmation do not match.";
                return;
            }
            var result = await UserManager.ChangePasswordAsync(
                currentUser,
                passwordModel.CurrentPassword,
                passwordModel.NewPassword);
            if (result.Succeeded)
            {
                errorMessage = null;
                passwordModel = new PasswordChangeModel();
                // Optionally show success toast/notification here
            }
            else
            {
                errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while changing the password.";
        }
        StateHasChanged();
    }
}