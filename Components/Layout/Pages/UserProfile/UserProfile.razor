@page "/user-profile"
@using LocalGov360.Data
@using LocalGov360.Data.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@attribute [Authorize]

<style>
    .container-fluid {
        padding-right: 15px;
        padding-left: 15px;
        margin-right: auto;
        margin-left: auto;
    }

    .card {
        position: relative;
        display: flex;
        flex-direction: column;
        min-width: 0;
        word-wrap: break-word;
        background-color: #fff;
        background-clip: border-box;
        border: 0 solid rgba(0, 0, 0, 0.125);
        border-radius: 0.25rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }

    .card-header {
        padding: 1.5rem;
        margin-bottom: 0;
        background-color: rgba(0, 0, 0, 0.03);
        border-bottom: 0 solid rgba(0, 0, 0, 0.125);
    }

    .card-body {
        flex: 1 1 auto;
        padding: 1.5rem;
    }

    .avatar {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        background: #e0e0e0;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2rem;
        font-weight: bold;
        margin: 0 auto 1rem;
        color: #000;
    }

    .form-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
    }

    .form-full-width {
        grid-column: 1 / -1;
    }

    .form-control {
        display: block;
        width: 100%;
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
        line-height: 1.5;
        color: #000;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #000;
        border-radius: 0.25rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .form-control:focus {
            border-color: #000;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0, 0, 0, 0.25);
        }

    .btn-save {
        color: #fff;
        background-color: #000;
        border-color: #000;
        padding: 0.375rem 0.75rem;
        border-radius: 0.25rem;
        cursor: pointer;
    }

        .btn-save:hover {
            background-color: #333;
            border-color: #333;
        }

    .text-center {
        text-align: center;
    }

    .text-muted {
        color: #6c757d !important;
    }

    .spinner-border {
        display: inline-block;
        width: 2rem;
        height: 2rem;
        vertical-align: text-bottom;
        border: 0.25em solid #000;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
    }

    @@keyframes spinner-border {
        to {
            transform: rotate(360deg);
        }
    }

    .visually-hidden {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
    }

    .alert {
        position: relative;
        padding: 0.75rem 1.25rem;
        margin-bottom: 1rem;
        border: 1px solid transparent;
        border-radius: 0.25rem;
    }

    .alert-danger {
        color: #000;
        background-color: #f8f9fa;
        border-color: #000;
    }

    .alert-dismissible {
        padding-right: 4rem;
    }

    .btn-close {
        position: absolute;
        top: 0;
        right: 0;
        padding: 0.75rem 1.25rem;
        color: #000;
        background: transparent url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23000'%3e%3cpath d='M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707A1 1 0 01.293.293z'/%3e%3c/svg%3e") no-repeat center center;
        background-size: 1rem;
    }

    .bg-gradient-dark {
        background-image: linear-gradient(310deg, #000 0%, #333 100%);
    }

    .bg-gradient-success {
        background-image: linear-gradient(310deg, #666 0%, #999 100%);
    }

    .bg-gradient-warning {
        background-image: linear-gradient(310deg, #555 0%, #888 100%);
    }

    .bg-gradient-secondary {
        background-image: linear-gradient(310deg, #777 0%, #aaa 100%);
    }
</style>

<div class="container-fluid py-2">
    <div class="row">
        <div class="col-12">
            <div class="card my-4">
                <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                    <div class="bg-gradient-dark shadow-dark border-radius-lg pt-4 pb-3">
                        <h6 class="text-white text-capitalize ps-3">User Profile</h6>
                    </div>
                </div>
                <div class="card-body px-0 pb-2">
                    @if (isLoading)
                    {
                        <div class="text-center p-4">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (currentUser != null)
                    {
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                @errorMessage
                                <button type="button" class="btn-close" @onclick="() => errorMessage = null" aria-label="Close"></button>
                            </div>
                        }
                        <div class="text-center mb-4">
                            <div class="avatar bg-gradient-@(GetAvatarColor(currentUser.Email))">
                                @GetUserInitials(currentUser.Email, currentUser.UserName)
                            </div>
                            <h3>@currentUser.UserName</h3>
                            <p class="text-muted">@currentUser.Email</p>
                        </div>
                        <EditForm Model="@editUser" OnValidSubmit="UpdateProfile">
                            <DataAnnotationsValidator />
                            <div class="form-grid px-4">
                                <div class="mb-3">
                                    <label for="editEmail" class="form-label">Email</label>
                                    <InputText id="editEmail" @bind-Value="editUser.Email" class="form-control" />
                                    <ValidationMessage For="@(() => editUser.Email)" />
                                </div>
                                <div class="mb-3">
                                    <label for="editUsername" class="form-label">Username</label>
                                    <InputText id="editUsername" @bind-Value="editUser.UserName" class="form-control" />
                                    <ValidationMessage For="@(() => editUser.UserName)" />
                                </div>
                                <div class="mb-3">
                                    <label for="editFirstname" class="form-label">First Name</label>
                                    <InputText id="editFirstname" @bind-Value="editUser.Firstname" class="form-control" />
                                </div>
                                <div class="mb-3">
                                    <label for="editLastname" class="form-label">Last Name</label>
                                    <InputText id="editLastname" @bind-Value="editUser.Lastname" class="form-control" />
                                </div>
                                <div class="mb-3 form-full-width">
                                    <label for="editPhone" class="form-label">Phone Number</label>
                                    <InputText id="editPhone" @bind-Value="editUser.PhoneNumber" class="form-control" />
                                </div>
                                <div class="form-full-width">
                                    <button type="submit" class="btn-save">Save Changes</button>
                                </div>
                            </div>
                        </EditForm>
                        <div class="mt-4 px-4">
                            <h5>Change Password</h5>
                            <EditForm Model="@passwordModel" OnValidSubmit="ChangePassword">
                                <DataAnnotationsValidator />
                                <div class="mb-3">
                                    <label for="currentPassword" class="form-label">Current Password</label>
                                    <InputText type="password" id="currentPassword" @bind-Value="passwordModel.CurrentPassword" class="form-control" />
                                    <ValidationMessage For="@(() => passwordModel.CurrentPassword)" />
                                </div>
                                <div class="mb-3">
                                    <label for="newPassword" class="form-label">New Password</label>
                                    <InputText type="password" id="newPassword" @bind-Value="passwordModel.NewPassword" class="form-control" />
                                    <ValidationMessage For="@(() => passwordModel.NewPassword)" />
                                </div>
                                <div class="mb-3">
                                    <label for="confirmPassword" class="form-label">Confirm New Password</label>
                                    <InputText type="password" id="confirmPassword" @bind-Value="passwordModel.ConfirmPassword" class="form-control" />
                                    <ValidationMessage For="@(() => passwordModel.ConfirmPassword)" />
                                </div>
                                <button type="submit" class="btn-save">Change Password</button>
                            </EditForm>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-danger">User not found</div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ApplicationUser? currentUser;
    private bool isLoading = true;
    private string? errorMessage;
    private EditUserModel editUser = new();
    private PasswordChangeModel passwordModel = new();

    public class EditUserModel
    {
        public string Id { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string? Firstname { get; set; }
        public string? Lastname { get; set; }
        public string? PhoneNumber { get; set; }
    }

    public class PasswordChangeModel
    {
        public string CurrentPassword { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            currentUser = await UserManager.GetUserAsync(user);
            if (currentUser != null)
            {
                editUser = new EditUserModel
                {
                    Id = currentUser.Id,
                    Email = currentUser.Email ?? "",
                    UserName = currentUser.UserName ?? "",
                    Firstname = currentUser.Firstname,
                    Lastname = currentUser.Lastname,
                    PhoneNumber = currentUser.PhoneNumber
                };
            }
        }
        isLoading = false;
        StateHasChanged();
    }

    private string GetUserInitials(string? email, string? userName)
    {
        var name = !string.IsNullOrEmpty(userName) ? userName : email ?? "U";
        if (name.Contains('@'))
        {
            name = name.Split('@')[0];
        }
        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
        {
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        }
        return name.Length >= 2 ? name.Substring(0, 2).ToUpper() : name.ToUpper();
    }

    private string GetAvatarColor(string? email)
    {
        if (string.IsNullOrEmpty(email)) return "dark";
        var colors = new[] { "dark", "success", "warning", "secondary" };
        var hash = email.GetHashCode();
        var index = Math.Abs(hash) % colors.Length;
        return colors[index];
    }

    private async Task UpdateProfile()
    {
        if (currentUser == null) return;
        try
        {
            currentUser.Email = editUser.Email;
            currentUser.UserName = editUser.UserName;
            currentUser.Firstname = editUser.Firstname;
            currentUser.Lastname = editUser.Lastname;
            currentUser.PhoneNumber = editUser.PhoneNumber;
            var result = await UserManager.UpdateAsync(currentUser);
            if (result.Succeeded)
            {
                errorMessage = null;
                // Optionally, show a success message using an alert
            }
            else
            {
                errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while updating the profile.";
        }
        StateHasChanged();
    }

    private async Task ChangePassword()
    {
        if (currentUser == null) return;
        try
        {
            if (passwordModel.NewPassword != passwordModel.ConfirmPassword)
            {
                errorMessage = "New password and confirmation do not match.";
                return;
            }
            var result = await UserManager.ChangePasswordAsync(
                currentUser,
                passwordModel.CurrentPassword,
                passwordModel.NewPassword);
            if (result.Succeeded)
            {
                errorMessage = null;
                passwordModel = new PasswordChangeModel();
                // Optionally, show a success message using an alert
            }
            else
            {
                errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while changing the password.";
        }
        StateHasChanged();
    }
}